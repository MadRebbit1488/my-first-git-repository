
/* Види :*/
/* *    3. CSS-стилі через крапку '.' без відступів
Це означає що стилі використовуються до всіх тегів, наприклад  <div> у яких встановлений даний клас. 
При цьому якщо у інших HTML-елементів встановлений такийже клас, але тег не являється <div>, то стилі до нього використовуватись не будуть
<div class="color">First DIV</div>
*/
div.color{
  background-color: red;
}


  /**      4.div.color.text-color */
  /* коли без відступів описується декілька класів, означає що стилі використовуються тільки до  <div> який має два класи .color і .color-text і не використаються до тих <div> яким присвоєний тільки один клас
<div class="color text-color">First DIV</div> -> тут буде білий текст на блакитному фоні
<div class="color">Second DIV</div -> тут ні*/
div.color.text-color {
  background-color: blue;
  color: while;
}
/* *        7. Також можна замість HTML-тега писати назву класа 
<ul>
  <li>1</li>
  <li>
    <div>
      < span>
        <strong class="gray">2</strong>  <- grey
      </span>
    </div>
  </li>
 */
ul .gray{
  background-color: gray;
}














/* CSS-селектори використовуються для пошуку(вибору) HTML-елементів, які потрібно стилізувати

Їх можна розділити на  категорій:
*Прості селектори(вибір елементів на основі імені, ідентифікатору, класу)
*Комбінаторні селектори(вибір елементів на основі визначених відношень між ними)
*Селектори псевдокласів(вибір елементів на основі визначеного стану)
*Селектори псевдоелементів(вибір і стилізація частини елемента)
*Селектори атрибутів(вибір елемента на основі атрибуту або значення атрибуту)*/


/* !CSS селектор елемента  - обирає HTML-елементи на основі імені елемента
Приклад: 
Всі елементи <p> на сторінці будуть вирівняні по центру з червони кольором тексту*/
p{
  text-align: center;
  color: red;
}

/** ID використовується як атрибут id HTML елемента для вибору визначеного елемента 
Ім'я id не може починатись із цифри
<p id="para1">Hello World!</p>                          <- red
<p>Этот параграф не зависит от стиля.</p>*/
#para1{
  text-align: center;
  color: red;
}

/* *Class - обирає HTML елементи з визначеним атрибутом класу
Ім'я класу не може починатись з цифри
<h1 class="center">Красный заголовок по центру</h1>
<p class="center">Красный параграф с выравниванием по центру.</p> */
.center {
  text-align: center;
  color: red;
}
/* Також можна вказати щоб клас використовував лише визначені HTML елементи
<h1 class="center">Этот заголовок не будет затронут</h1>
<p class="center">Этот параграф будет красным и выровнен по центру.</p> */
p.center{
  text-align: center;
  color: red;
}

/* HTML-елементи можуть посилатись на к-ка класів
Приклад: 
Елемент <p> буде стилізований у відповідності з class="center" та class="large" 
<style>
p.center {
  text-align: center;
  color: red;
}
p.large {
  font-size: 300%;
}
<h1 class="center">Этот заголовок не будет затронут</h1>
<p class="center">Этот параграф будет красным и выровнен по центру.</p>
<p class="center large">Этот параграф будет красным, с выравниванием по центру и большим шрифтом.</p>
*/

/* *Універсальний CSS-селектор '*' - виділяє всі HTML елементи на сторінці
Приклад: 
Правило CSS впливає на кожен HTML елемент на сторінці
<h1>Hello world!</h1>
<p>Каждый элемент на странице будет зависеть от стиля.</p>
<p id="para1">Я тоже!</p>
<p>И я!</p>*/
*{
  text-align: center;
  color: blue;
}

/* *CSS-селектор групування ',' - обирає всі HTML елементи з однаковим значенням стилю
Приклад: h1,h2 та р мають однакові значення стилю
 */
h1 {
  text-align: center;
  color: red;
}
h2 {
  text-align: center;
  color: red;
}
p {
  text-align: center;
  color: red;
} 
/*Буде кращє групувати селектори, для мінімалізації коду. Щоб це зробити, потрібно селектори розділити комою  */
h1, h2, p {
  text-align: center;
  color: red;
}



/* *прості CSS селектори
*Селектор	          Приклад	    Опис прикладу */
.class	            .intro	    Обирає всі елементи з class="intro"
#id	                 #firstname	Обирає елемент з id="firstname"
*	                   *	        Обирає всі елементи на сторінці
element	             p	        Обирає всі елементи <p>
element,element,..	div, p	    Обирає всі елементи <div> та всі елементи <p>








/* ! CSS КОМБІНАТОРИ - вибір елементів на основі визначених відношень між ними
Комбінатор- це те що пояснює взаємозв'язок між селекторами.
CSS-селектор може мати більше одного селектора. Між простимим селекторами можна вімкнути комбінар.
Є 4 види комбінаторів:
*Селектор нащадків(пробіл)
*Селектор дочірній(>)
*Селектор сусідній родинний(+)
*Селектор загальний родинний(~)
*/


/* *Селектор нащадків(пробіл)
Відповідає всім елементам, які є нащадками вказаного елемента 
Приклад:
Обираються всі елементи <p> всередині <div> елементів
<div>
  <p>Параграф 1 в div.</p>              <-жовтий
  <p>Параграф 2 в div.</p>              <-жовтий
  <section><p>Параграф 3 в div.</p>     <-жовтий
  </section>
</div>
<p>Параграф 4 не в div.</p>
*/
div p{
  background-color: yellow;
}

/* *Селектор дочірній(>)
Стилі задаються тільки для тих HTML-елементів, які являються дочірніми по відношеню до заданого HTML-елемента
Приклад: 
Обираються всі елементи <p>, які є дочірніми для елемента <div>
<div>
  <p>Параграф 1 в div.</p>    <-жовтий
  <p>Параграф 2 в div.</p>    <-жовтий
  <section><p>Параграф 3 в div.</p>
  </section>< !-- не дочерний, но потомок -->
  <p>Параграф 4 в div.</p>     <-жовтий
</div>
*/
div > p{
  background-color: yellow;
}

/* *Селектор сусідній родинний(+)
Використовується для вибору елемента, який знаходиться після іншого конкретного елемента.
Родинні елементи повинні мати один і той самий батьківський елемент.
Приклад: 
Обирається перший елемент <p>, який розміщується відразу після елемента <div>
<div>
  <p>Параграф 1 в div.</p>
  <p>Параграф 2 в div.</p>
</div>

<p>Параграф 3. После div.</p>     <-жовтий
<p>Параграф 4. После div.</p>
*/
div + p{
  background-color: yellow;
}

/* *Селектор загальний родинний(~)
Однорівневий селектор який обирає всі елементи, які є братами і сестрами вказаного елемента
Приклад: 
Обираються всі елементи <p>, які є родичами елемента <div>
<p>Параграф 1.</p>
<div>
  <p>Параграф 2.</p>
</div>
<p>Параграф 3.</p>            <-жовтий
<code>Какой-то код.</code>
<p>Параграф 4.</p>            <-жовтий
 */
div~p{
  background-color: yellow;
}






/* !CSS Псевдо-класси - вибір елементів на основі визначеного стану
Псевдо-клас використовується для визначення особливого стану елемента
Можна використовувати для: 
-Стилізації елемента, коли користувач наводить на нього курсор
-Стилізації відвіданих та невідвіданих посилань 
-Стилізації елемента коли він знаходиться в фокусі

*Синтаксис: 
selector:pseudo-class{
  property:value;
}

/* *Якірні псевдо-класи */
Приклад: */
/* Невідвідане посилання */
a:link{
  color: #FF0000;
}
/* відвідуване посилання */
a:visited{
  color: #00FF00;
}
/* курсор над посиланням */
a:hover{
  color: #FF00FF;
}
/* обране (активне) посилання */
a:active {
  color: #0000FF;
}
/* Примітка:
a:hover повинен йти після a:link та a:visited .
a:active повинен іти після a:hover
Імена псевдо-мосивів не чутливі до регісту*/
/* * Псевдо-класи та CSS-класи
Їх можна комбінувати. Якзо навести курсор на посилання, воно змінить колір

<p><a class="highlight" href="../css_syntax.html">CSS Синтаксис</a></p>*/
a.highlight:hover{
  color: #ff0000;
}

/* Приклад псевдокласу  :hover на елементі <div>
Змінює колір кнопки з зеленої на блакитний
div {
  background-color: green;
  color: white;
  padding: 25px;
  text-align: center;
}

div:hover {
  background-color: blue;
}
*/

div:hover{
  background-color: blue;
}

/* *Псевдо-клас :first-child
Відповідає заданому елементу який є першим дочірнім елементом другого елементу
    -Відповідає першому елементу <p>
    Селектор відповідає будь-якому елелменту <p>, який є першим дочірнім елементом будь-якого елемента
        <style>
            p:first-child {
              color: blue;
            }
        </style>
        </head>
        <body>
        <p>Это какой-то текст.</p>        <-blue
        <p>Это какой-то текст.</p>
*/
p:first-child{
  color: blue;
}

    /* Відповідає першому елементу <i>в усіх елементах <p> 
        <style>
        p i:first-child {
          color: blue;
        }
    
        </style>
        </head>
        <body>
        <p>Я <i>знаю</i>HTML. Я <i>знаю</i>HTML.</p>
        <p>Я <i>знаю</i>CSS. Я <i>знаю</i>CSS.</p></body>
        Кожне перше слово 'знаю' блакитне*/

p i:first-child{
  color: blue;
}

    /* Співставити всі елементи <i> в усіх перших дочірніх елементах <p>
    В першому рядку всі слова 'знаю' сині
        <p>Я <i>знаю</i>JavaScript. Я <i>знаю</i>JavaScript.</p>
        <p>Я <i>знаю</i>JavaScript. Я <i>знаю</i>JavaScript.</p>*/
p:first-child{
  color: blue;
}

/* *Псевдо-клас :lang
Дозволяє визначати спеціальні правила для різних мов
Приклад:
:lang визначає лапки для елементів <q> із lang="no"

<style>
q:lang(no) {
  quotes: "~" "~";
}
</style>
<p>Какой-то текст <q lang="no">Кавычки в параграфе</q>Какой-то текст.</p>

Вихід: 
Какой-то текст~Кавычки в параграфе~Какой-то текст.
*/
q:lang(no) {
  quotes: "~" "~";
}


/* *Список псевдо-класів 
* Селектор	            Приклад	Опис */
:active	              a:active	Обирає активне посилання
:checked	            input:checked	Обирає кожен перевірений елемент <input>
:disabled	            input:disabled	Обирає кожен відключений елемент <input>
:empty	              p:empty	Обирає кожен елемент <p>, який не має дочірніх елементів
:enabled	            input:enabled	Обирає кожен включений елемент <input>
:first-child	        p:first-child	Обирає всі елементи <p>, які є першим нащадком свого предка
:first-of-type	      p:first-of-type	Обирає кожен елемент <p> який є першим елементом <p> свого предка
:focus	              input:focus	Обирає елемент <input> який має фокус
:hover	              a:hover	Обирає посилання при наведенні миші
:in-range           	input:in-range	Обирає елементи <input> зі значенням у визначеному діапазоні
:invalid	            input:invalid	Обирає всі елементи <input> з неприпустимим значенням
:lang(language)	      p:lang(it)	Обирає кожен елемент <p> зі значенням атрибута lang, що починається з "it"
:last-child	          p:last-child	Обирає всі елементи <p>, які є останнім дочірнім елементом свого предка
:last-of-type	        p:last-of-type	Обирає кожен елемент <p>, який є останнім елементом <p> свого предка
:link	                a:link	Обирає всі не відвідувані посилання
:not(selector)	      :not(p)	Обирає кожен елемент, який не є елементом <p>
:nth-child(n)	        p:nth-child(2)	Обирає кожен елемент <p>, який є другим дочірнім елементом свого предка
:nth-last-child(n)	  p:nth-last-child(2)	Обирає кожен елемент <p>, який є другим дочірнім елементом свого предка, рахуючи від останнього дочірнього елемента
:nth-last-of-type(n)	p:nth-last-of-type(2)	Обирає кожен елемент <p>, який є другим елементом <p> свого предка, рахуючи від останнього нащадка
:nth-of-type(n)	      p:nth-of-type(2)	Обирає кожен елемент <p> який є другим елементом <p> свого предка
:only-of-type	        p:only-of-type	Обирає кожен елемент <p> який є єдиним елементом <p> свого предка
:only-child	          p:only-child	Обирає кожен елемент <p> який є єдиним потомком свого предка
:optional           	input:optional	Обирає елементи <input> без атрибута "required"
:out-of-range	        input:out-of-range	Обирає елементи <input> зі значенням поза вказаного діапазону
:read-only	          input:read-only	Обирає елементи <input> зі вказаним атрибутом "readonly"
:read-write	          input:read-write	Обирає елементи <input> без атрибута "readonly"
:required	            input:required	Обирає елементи <input> зі вказаним атрибутом "required"
:root	                root	Обирає кореневий елемент документа
:target	              #news:target	Обирає поточний активний елемент #news (при натисканні на URL, що містить це ім’я якоря)
:valid	              input:valid	Обирає всі елементи <input> с допустимим значенням
:visited	            a:visited	Обирає всі відвідані посилання









/* !CSS Псевдо-елементи - використовуються для стилізації виздначених частин елемента 
Можна використовувти для: 
*Стилізації першої літери або рядка елемента
*Встивки змісту до або після елемента

*Синтаксис: 
selector::pseudo-element {
  property: value;
}*/

/* *Псевдо-елемент ::first-line
Використовується для додавання спеціального стилю для першого рядка тексту

Приклад: 
Форматування першого рядка тексту в усіх елементах <p>
<style>
p::first-line {
  color: #ff0000;
  font-variant: small-caps;
}
</style>
<p>Вы можете использовать псевдоэлемент ::first-line,
чтобы добавить специальный эффект к первой строке текста. Еще немного текста. И даже больше,
и больше.</p>
*/
p::first-line {
  color: #ff0000;
  font-variant: small-caps;
}
/* Примітка: 
Даний псевдо-елемент може застосовувати лише до блочних елементів
Властивості псевдо-елементу ::first-line: 
-font properties
-color properties
-background properties
-word-spacing
-letter-spacing
-text-decoration
-vertical-align
-text-transform
-line-height
-clear 

Подвійна крапка показує різницю між псевдо-класами і псевдо-елементами в CSS3. Синтаксис з однією двокрапкою використовується в CSS2 та CSS1 */

/* **Псевдо-елемент ::first-letter
Використовується для додавання спеціального стилю до першої літери тексту
Приклад: 
Форматування першої літери в усіх елелментах <p> 
<style>
p::first-letter {
  color: #ff0000;
  font-size: xx-large;
}
</style>
<p>Вы можете использовать псевдоэлемент ::first-letter,
чтобы добавить специальный эффект к первому символу текста !</p>*/
p::first-letter{
  color: #ff0000;
  font-size: xx-large;
}
/* Примітка: 
Застосовується лише для блочних елементів
Властивості: 
-font properties
-color properties
-background properties
-margin properties
-padding properties
-border properties
-text-decoration
-vertical-align (тільки якщо "float" встановлено "none")
-text-transform
-line-height
-float
-clear */

/* *Псевдо-елементи можна комбінувати із CSS класами
<style>
p.intro::first-letter {
  color: #ff0000;
  font-size: 200%;
}
</style>
<p class="intro">Это введение.</p><p>Это параграф с некоторым текстом. Ещё немного текста.</p> */
p.intro::first-letter{
  color: #ff0000;
  font-size: 200%;
}
/* Перша літера параграфу буде відображатись із class="intro" червоним та великим розміром */

/* *К-ка псевдо-елементів також можуть бути об'єднані
Приклад: 
Перша літера параграфу буде велика і червона. Інша частина першого рядка буде синя, все інше буде кольором і шрифтом за замовчуванням

<p>Вы можете комбинировать псевдоэлементы ::first-letter и ::first-line,
чтобы добавить особый эффект к первой букве и первой строке текста !</p>
*/
p::first-letter{
  color: #ff0000;
  font-size: xx-large;
}
p::first-line{
  color: #0000ff;
  font-variant: small-caps;
}

/* *Псевдо-елемент ::before
Може використовуватись для вставки деякого змісту перед змістом елемента
Приклад: 
Зображення вставляється перед змістом кожного елемента <h1>
*/
h1::before{
  content: url(smiley.gif);
}

/* **Псевдо-елемент ::after
Використовується для вставки деякого змісту після змісту елемента */
h1::after{
  content: url(smiley.gif);
}

/**Псевдо-елемент ::marker 
Обирає маркери елементів списку

<style>
::marker {
  color: red;
  font-size: 23px;
}
</style>
<ul>
  <li>Кофе</li>
  <li>Чай</li>
  <li>Молоко</li>
</ul>

<ol>
  <li>Первый</li>
  <li>Второй</li>
  <li>Третий</li>
</ol>*/
::marker{
  color: red;
  font-size: 23px;
}

/* *Псевдо-елемент ::selection
Відповідає частині елемента, обраної користувачем
CSS властивості які можуть бути застосовані до ::selection: 
color
background
cursor 
outline

Приклад: 
Текст стає червоним на жовтому фоні*/
::selection{
  color: red;
  background: yellow;
}

/* Firefox підтримує альтернативу, властивість ::-moz-selection */

/* *Псевдо-елементи 
*Селектор	      Приклад	Опис */
::after p::after Вставляє контент після кожного елемента <p>::before p::before Вставляє контент перед кожним елементом <p>::first-letter p::first-letter Обирає першу літеру кожного елемента <p>::first-line p::first-line Обирає перший рядок кожного елемента <p>::selection p::selection Обирає частину елемента,
яка обрана користувачем






/* ! CSS Селектори атрибутів - вибір елементів на основі атрибуту або значення атрибуту
*Стиль HTML-елементів з визначеними атрибутами
Можна стилізувати елементи HTML, які мають визначені атрибути або значення атрибутів
*/

/* *CSS селектор [attribute] - використовується для вибору елементів із вказаним атрибутом
Приклад: 
Обираються всі елементи <a> з атрибутом target

<a href="https://www.w3schools.com">w3schools.com</a>
<a href="http://www.disney.com" target="_blank">disney.com</a>
<a href="http://www.wikipedia.org" target="_top">wikipedia.org</a>*/
a[target]{
  background-color: yellow;
}

/* * CSS селектор [attribute="value"] - використовується для вибору елементів із вказаним атрибутом і значенням
Приклад:
Обираються всі елементи <a> з атрибутом target="_blank"
<a href="https://www.w3schools.com">w3schools.com</a>
<a href="http://www.disney.com" target="_blank">disney.com</a>
<a href="http://www.wikipedia.org" target="_top">wikipedia.org</a>
*/
a[target="_blank"]{
  background-color: yellow;
}

/** CSS селектор [attribute~="value"] - використовується для вибору елементів із значенням атрибута, що містить вказане слово
Приклад: 
Обираються всі елементи з атрибутом title, який містить розділений відступами список слів, одним із яких є "flower"
<img src="../images/klematis.jpg" title="klematis flower" width="150" height="113">
<img src="../images/img_flwr.gif" title="flower" width="224" height="162">
<img src="../images/img_tree.gif" title="tree" width="200" height="358">
Всы заображення із атрибутом title який містить слово flower отримують жовту межу*/
[title~="flowers"]{
  border: 5px solid yellow;
}

/** CSS селектор [attribute|="value"] - Використовуєтся для вибору елелментів із вказаним атрибутом, починаючи із вказаного значення
Приклад: 
Обираються всі елементи зі значенням атрибуту class, які починаються з "top"
Значення має бути цілим словом, або одне як  class="top" або з дефісом class="top-text"
<h1 class="top-header">Привет</h1>            <-жовтий
<p class="top-text">Hello world!</p>          <-жовтий
<p class="topcontent">Вы изучаете CSS?</p>*/
[class|="top"]{
  background: yellow;
}

/* *CSS селектор [attribute^="value"] - використовується для вибору елементів, значення атрибута яких починається з вказаного  значення
Приклад: 
Обираються всі елементи зі значенням атрибута class, які починаються з "top"
Значення не повинно бути цілим словом

<h1 class="top-header">Welcome</h1>                 <-жовтий
<p class="top-text">Hello world!</p>                <-жовтий
<p class="topcontent">Вы изучаете CSS?</p>          <-жовтий
 */
[class^="top"]{
  background: yellow;
}


/* * CSS селектор [attribute$="value"] - використовується для вибору елементів, значення атрибута яких закінчується вказаним значенням
Приклад: 
Обираються всі елементи зі значенням атрибута class які закінчуються на "test"
Значення не повинно бути цілим словом
<div class="first_test">Первый div элемент.</div>             <-жовтий
<div class="second">Второй div элемент.</div>
<div class="my-test">Третий div элемент.</div>                <-жовтий
<p class="mytest">Это какой-то текст в параграфе.</p>         <-жовтий*/   
[class$="test"]{
  background: yellow;
}

/* *CSS селектор [attribute*="value"] - використовується для вибору елементів, значення атрибутів яких містить вказане значення
Приклад:
Обираються всі елементи зі значенням атрибута class які містять "te"

<div class="first_test">Первый div элемент.</div>         <-жовтий
<div class="second">Второй div элемент.</div>
<div class="my-test">Третий div элемент.</div>            <-жовтий
<p class="mytest">Это какой-то текст в параграфе.</p>     <-жовтий
*/
[class*="te"]{
  background: yellow;
}

/* *Стилізація форм
Селектори атрибутів можуть бути корисними для стилізації без класу або ID
Приклад: 
<h2>Стилизация формы</h2>
<form name="input" action="" method="get">
  Имя:<input type="text" name="Name" value="Peter" size="20">
  Фамилия:<input type="text" name="Name" value="Griffin" size="20">
  <input type="button" value="Пример кнопки">
</form> */
input[type="text"]{
  width: 150px;
  display: block;
  margin-bottom: 10px;
  background-color: yellow;
}
input[type="button"]{
  width: 120px;
  margin-left: 35px;
  display: block;
}

/* *CSS селектори атрибутів 
*Селектор	               Приклад	            Опис*/
[attribute]	            [target]	          Обирає всі елементи з атрибутом target
[attribute=value]	      [target=_blank]	      Обирає всі елементи з target="_blank"
[attribute~=value]	    [title~=flower]	      Обирає всі елементи з атрибутом title, що містить слово "flower"
[attribute|=value]	    [lang|=en]	          Обирає всі елементи зі значенням атрибута lang, що починається з "en"
[attribute^=value]	    a[href^="https"]      Обирає кожен елемент <a>, значення атрибута href якого починається з "https"
[attribute$=value]	    a[href$=".pdf"]	      Обирає кожен елемент <a>, значення атрибута href якого закінчується на ".pdf"
[attribute*=value]	    a[href*="w3schools"]	Обирає кожен елемент <a>, значення атрибута href якого містить підрядок "w3schools"