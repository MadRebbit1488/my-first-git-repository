/* Теми:
Підключення: 
* Зовнішня таблиця стилів
* Внутрішня таблиця стилів
*Вбудовані стилі

Кольори: 
* RGB
* RGBA
* HEX
* HSL
* HSLA

Фон: 
Властивість	            Опис
*background-color	      Встановлює колір фону елемента
      -opacity
*background-image	      Встановлює фонове зображення для елемента
*background-repeat	    Встановлює, як буде повторюватись фонове зображення
      -repeat-y
      -no-repeat
*background-attachment	Встановлює, чи є фонове зображення фіксованим, чи прокручується разом з іншою частиною сторінки
      -fixed
      -scroll
*background-position	  Встановлює початкову позицію фонового зображення
*background	            Встановлює всі властивості фону в одній об’яві
*background-clip	      Визначає область малювання фону
*background-origin	    Визначає, де розташовані фонові зображення.
*background-size	      Визначає розмір фонового зображення (зображень) 

Межа:
Більше властивостей у конспекті 
*border-style        Встановлює стиль чотирьох меж 
*border-width	        Встановлює ширину чотирьох меж
*border-color - Встановлює колір чотирьох меж
*border	              Встановлює всі властивості межі в одній об’яві
*border-radius	      Встановлює всі чотири властивості border-*-radius для *закруглених кутів

Поля:
*margin-top
*margin-right
*margin-bottom
*margin-left
*Margin Collapse - згортання полів

Внутрішні відступи:
*padding-top - вгорі
*padding-right - справа
*padding-bottom - знизу
*padding-left - зліва

Висота і ширина:
*height - Встановлює висоту елемента
*max-height	Встановлює максимальну висоту елемента
*min-height	Встановлює мінімальну висоту елемента
*width	Встановлює ширину елемента
*max-width	Встановлює максимальну ширину елемента
*min-width	Встановлює мінімальну ширину елемента

*CSS Блочна модель

Контур outline
Має такі властисвосіт: 
*outline-style - Визначає стиль контуру
      dotted,dashed,solid,double,ridge,inset,outset,none,hidden
*outline-color - Визначає колір контуру
      invert
*outline-width - Визначає ширину контуру
      thin,medium,thick
*outline-offset - Задає відстань між контуром і краєм або межею елемента.
*outline - 	Скорочена властивість для встановлення ширини контуру, стиля контуру і кольору контуру в одній об’яві.

Текст
*Вирівнювання тексту
      -text-align     -text-align-last      -vertical-align
      -direction      -unicode-bidi
*Оформлення тексту - text-decoration
      -text-decoration-line     -text-decoration-color
      -text-decoration-style    -text-decoration
      -text-decoration-thickness - Визначає товщину лінії text-decoration
*Трансформація - text-transform
      -uppercase - заголовний текст       -lowercase - рядковий текст
      -capitalize - перша літера кожного слова заголовна
*Інтервал 
      -text-indent - Відступ тексту  -letter-spacing - Міжлітерна відстань
      -line-height - Висота рядка     -word-spacin - Інтервал між словами
      -white-space - Пробіл
*Тінь
      -text-shadow - додає тінь до тексту


ШРИФТИ
Є 5 загальних сімейств шрифтів
*Serif - мають невелике обведення по краях кожної літери. Вони створюють відчуття формальності та елегантності.
*Sans-serif - мають чисті лінії(без дрібних штрихів). Вони створюють сучасний і мінімалістичний вигляд.
*Monospace - всі літери мають однакову фіксовану ширину. Вони створюють механічний вигляд.
*Cursive - імітують людський почерк
*Fantasy - декоративні/грільні шрифти
Властивості: 
*font-family - Визначає сімейство шрифтів для тексту
*Веб-безпечні шрифти
*font-style - Стиль шрифту
      -normal - текст відображається нормально
      -italic - текст відображається курсивом
      -oblique - текст "нахилений"(нахилений шрифт дуже схожий на курсив, але підтримується меншою мірою)
*Font-Weight - Товщина шрифту
      -normal
      -bold
      -lighter
*Font-Variant - Визначає, чи слід відображати текст дрібним шрифтом
*Font Size - Розмір шрифту
*font  - Встановлює всі властивості шрифту в одній об’яві

Іконки: 
*Font Awesome Іконки
*Bootstrap іконки
*Google Іконки

Посилання
Властивості:
*a:link - звичайне, невідвідуване  посилання
*a:visited - посилання яке відвідавв користвувач
*a:hover - посилання, коли куристувач наводить на нього курсор миші
*a:active - посилання в той момент, коли воно натиснуте(активне)


Списки


*/




/** CSS синтаксис складається з селектора та блоку об'яви(декларації)
Селектор  Декларація
h1        {color:blue;} 
Селектор вказує на елемент HTML який потрібно стилізувати
Декларація включає назву CSS властивості та значення*/
___________________________________________________________________________
/*! Підключення CSS 
Способи підключення: 
-Зовнішня таблиця стилів
-Внутрішня таблиця стилів
-Вбудований стиль
*/
/**Зовнішня таблиця стилів змінює зовнішній вигляд всього сайту
Кожна HTML сторінка містить посилання на файл зовнішньої таблиці стилів всередині елемента <link>. Це найбільш розповсюджений спосіб 

Зовнішні стилі в елементі <link> вказуються всередині розділу <head>

<!DOCTYPE html>
<html>
<head>
<link rel="stylesheet" href="mystyle.css">
</head>
**Внутрішня таблиця стилів використовується тоді коли окрема HTML сторінка має свій унікальний стиль
Внутрішні стилі визначені в елементі <style> в середині розділу <head>

<!DOCTYPE html>
<html>
<head>
<style>
body {
  background-color: linen;
}
h1 {
  color: maroon;
  margin-left: 40px;
}
</style>
</head>
**Вбудовані стилі використовуються для застосування унікального стилю для окремого елементу на HTML-сторінці
Щоб використати вбудовані стилі, потрібно додати атрибут стилю до еледповідного тегу. Атрибут style може містити будь яку властивість CSS. Але це потрібно використовувати вкрай обережно, так як це перевантажує HTML-код та збільшує загальний об'єм веб-сторінки
Приклад: 
Вбудовані стилі визначаються в атрибути "style"

<body>
<h1 style="color:blue;text-align:center;">Це заголовок</h1>
<p style="color:red;">Це параграф.</p>
</body>

Якщо д=властивості для одного селектора визначені в різних таблицях стилів, то буде використано значення із останньої прочитаної таблиці стилів
**Порядок використання каскадних стилів
Всі стилі на сторінці будуть каскадно перетворюватись в нову віртуальну таблицю стилів.
Номер 1 має найвищий пріорітет
1. Вбудований стиль
2.Зовнішні та внутрішні таблиці стилів
3.Стиль браузера за замовчуванням*/





__________________________________________________________________________
/* !Кольори

*background-color - Колір фону
<h1 style="background-color:DodgerBlue;">Hello World</h1>

*color - Колір тексту 
<h1 style="color:Tomato;">Hello World</h1>

*border - Колір меж 
<h1 style="border:2px solid Tomato;">Hello World</h1>

*CSS значення кольору
Кольори можуть бути вказані з використання значень 
*RGB
*RGBA
*HEX
*HSL
*HSLA
*/

/*!  RGB 
Колір за допомогою RGB можна вказати використовуючи формулу 
rgb(red, green, blue)
Де кожен параметр визначає інтенсивність кольору від 0 до 255
Приклад: 
rgb (255, 0, 0) відображається червоним, тому що в червоного встановлено найбільш високе значення (255), а для інших значення 0
ДЛя чьорного кольору потрібно встановити параметр  rgb(0, 0, 0)
Для білого  rgb(255, 255, 255)
*/

/* ! RGBA - є розширенням значень кольору для RGB, який вихначає непрозорість кольору 
Вказується за допомогою  rgba(red, green, blue, alpha)
Параметр альфа - це число від 0,0(повністю прозорий) до 1,0(не прозорий)*/

/* ! HEX - колір можна вказати за допомогою шістнадцяткового значення в формі

*#rrggbb
-rr(red)
-gg(green)
-bb()blue

Інтенсивність кольору визначається в діапазоні від 00 та ff
Приклад: 
#ff0000 - червоний

Іноді можна зустріти 3-х значний шістнадцятковий код, це скорочення для деяких 6-значних шіістнадцядкових кодів.
Має вигляд:
#rgb (red, green, blue)  - від 0 до f
Можна використовуавати якщо кожне значення  (RR, GG і BB) однакове для кожного компонента.
Приклад:
#ff00cc можна записати як #f0c
*/

/* !  HSL вказує кольор за допомогою hue(Відтінок),saturation(насичення),lightness(яскравість)
hsl(hue, saturation, lightness)
*/

/* !   HSLA - є розширенням значення кольору HSL, який визначає непрозорість кольору
hsla(hue, saturation, lightness, alpha)
Альфа від 0,0(повністю прозорий) до 1,0(не прозорий)
*/




___________________________________________________________________________
/* !Background - Фон 
Використовується для визначення фонових ефектів елементів
Властивості фону: 
*background-color
      -opacity
*background-image
*background-repeat
      -repeat-y
      -no-repeat
*background-attachment
      -fixed
      -scroll
*background-position
*Background Shorthand*/

/* * background-color - колір фону 
Синтаксис: 
body {
  background-color: lightblue;
}
Таким чином можна встановити колір фону будь якого HTML-елементу

    *opacity - властивість яка визначає непрозорість/прозорість елемента. 
        Приймає значання від 0,0 до 1,0
        Приклад: 
        div {
          background-color: green;
          opacity: 0.3;
        }
        При додаванні прозорості до фону елемента всі дочірні елементи наслідують ту саму прозорість.
        Якщо не потрібно використовувати сподкуву прозорість до дочірніх елементів, потрібно використати значення кольору RGBA
        div {
          background: rgba(0, 128, 0, 0.3)     Зелений фон з opacity 30% 
        }
        */

/**  background-image - визначає зображення для використання в якості фону елемента
За замовчуванням зображення повторюється тому воно покриває весь елемент
Приклад: фонове зображення для сторінки
body {
  background-image: url("paper.gif");
}
Фонове зображення можна встановити для визначених елементів
p {
  background-image: url("paper.gif");
}
*/

/* *  background-repeat- за замовчуванням повторює зображення як по горизонталі так і по вертикалі
body {
  background-image: url("../images/gradient_bg.png");
  background-repeat: repeat-x;
}
Зображення варто повторювати тільки по горизонталі або тільки по вертикалі
      *repeat-y - повторює зображення по вертикалі
            background-repeat: repeat-y;

      *no-repeat - відображає фонове зображення тільки один раз 
            body {
              background-image: url("../images/img_tree.png");
              background-repeat: no-repeat;
            }
            Фонове зображення розтошовується в те місце що і текст
*/

/* *  background-position - використовується для вказуваня положення(позиції) фонового зображення
Приклад: розмщєння фонового зображення в правому верхньому куті
body {
  background-image: url("../images/img_tree.png");
  background-repeat: no-repeat;
  background-position: right top;
}   */

/* *   background-attachment - визначає, чи повинно фонове зображення прокручуватись або фіксуватись
      *fixed -  фонове зображення має бути фіксованим 
            body {
              background-image: url("../images/img_tree.png");
              background-repeat: no-repeat;
              background-position: right top;
              background-attachment: fixed;
            }
      
      *scroll - фонове зображення буде прокручуватись
            body {
              background-image: url("../images/img_tree.png");
              background-repeat: no-repeat;
              background-position: right top;
              background-attachment: scroll;
            }      */

/* *   Background Shorthand  - скорочена властивість
Щоб скоротити  код можна вказати всі властивості в одній єдиній властивості
Замість: 
body {
  background-color: #fff;
  background-image: url("img_tree.png");
  background-repeat: no-repeat;
  background-position: right top;
}
Можна записати скорочену властивість background
body {
  background: #fff url("../images/img_tree.png") no-repeat right top;
}
При використанні скороченої властивості потрібно дотримуватись порядку значень властивостей
-background-color
-background-image
-background-repeat
-background-attachment
-background-position
*/
/* *Всі CSS властивості фону
*Властивість              Опис
background-clip           Визначає область малювання фону
background-origin         Визначає,де розташовані фонові зображення.  background-size           Визначає розмір фонового зображення (зображень)
*/








___________________________________________________________________________
/* !  Border - Межа - дозволяє вказати стиль, ширину і колір межі елемента
Властивості межі: 
*border-style        Встановлює стиль чотирьох меж 
- значення див в конспекті
*border-width	        Встановлює ширину чотирьох меж
*border-color - Встановлює колір чотирьох меж
*border	              Встановлює всі властивості межі в одній об’яві
*border-radius	      Встановлює всі чотири властивості border-*-radius для *закруглених кутів

*border-top	          Встановлює всі властивості верхньої межі в одній об’яві
*border-top-color	    Встановлює колір верхньої межі
*border-top-style     Встановлює стиль верхньої межі
*border-top-width	    Встановлює ширину верхньої межі
*border-bottom	      Встановлює всі властивості нижньої межі в одній об’яві
*border-bottom-color	Встановлює колір нижньої межі
*border-bottom-style	Встановлює стиль нижньої межі
*border-bottom-width	Встановлює ширину нижньої межі
*border-left	        Встановлює всі властивості лівої межі в одній об’яві
*border-left-color	  Встановлює колір лівої межі
*border-left-style	  Встановлює стиль лівої межі
*border-left-width	  Встановлює ширину лівої межі
*border-right	        Встановлює всі властивості правої межі в одній об’яві
*border-right-color	  Встановлює колір правої межі
*border-right-style	  Встановлює стиль правої межі
*border-right-width	  Встановлює ширину правої межі
*/

/* *  border-style - визначає яку межу відображати
Має наступні значення:
      *dotted - визначає крапкову межу
      *dshed - визначає пунктирну межу
      *solid - визначає суцільну межу
      *double - визначає подвійну межу
      *groove - визначає тримірну рифлену межу. Ефект залежить від значення кольору межі
      *ridge - визначає тримірну ребристу межу. Ефект залежить від значення кольору межі
      *inset - визначає внутрішню тримірну межу. Ефект залежить від значення кольору межі
      *outset - визначає зовнішню тримірну межу. Ефект залежить від значення кольору межі
      *none - не визначає межі
      *hidden - визначає приховану межу
Може мати від 1 до 4 значень(для верхньої правої, нижньої, лівої межі)      
Приклад:    
p.dotted {border-style: dotted;}
p.dashed {border-style: dashed;}
p.solid {border-style: solid;}
p.double {border-style: double;}
p.groove {border-style: groove;}
p.ridge {border-style: ridge;}
p.inset {border-style: inset;}
p.outset {border-style: outset;}
p.none {border-style: none;}
p.hidden {border-style: hidden;}
p.mix {border-style: dotted dashed solid double;}   <-Змішана межа.

!Жодна інша властивіть не буде мати ефекту, якщо не встановлена властивість border-style
*/

/* *  border-width - Встановлює ширину чотирьох меж 
Ширина може бути задана як визначений розмір(в пікселях, pt, см, em і т.д.) або за допопмогою одного із трьох попередньо визначених значень:thin, medium, thick (тонка, середня, товста):
Приклад: 
p.one {
  border-style: solid;
  border-width: 5px;
}
p.two {
  border-style: solid;
  border-width: medium;
}
p.three {
  border-style: dotted;
  border-width: 2px;
}
p.four {
  border-style: dotted;
  border-width: thick;
}
p.five {
  border-style: double;
  border-width: 15px;
}
p.six {
  border-style: double;
  border-width: thick;
}

*Визначення ширини сторони: 
p.one {
  border-style: solid;
  border-width: 5px 20px;  5 пікселів сгори і знизу, 20 пікселів по бокам 
}

p.two {
  border-style: solid;
  border-width: 25px 10px 4px 35px; 25 пікселів згори, 10 пікселів справа, 4 пікселі знизу і 35 пікселів зліва 
}
*/

/* *    border-color - Встановлює колір чотирьох меж 
Колір можу бути встановлено: 
-name - вказати назву кольору, наприклад "red"
-HEX - вказати значення HEX, наприклад "#ff0000"
-RGB - вказати значення RGB, наприклад "rgb(255,0,0)"
-HSL - вказати значення HSL, наприклад "hsl(0, 100%, 50%)"
-transparent (прозорість)

!Якщо border-color не задано, він наслідує колір елемента
Приклад: 
p.one {
  border-style: solid;
  border-color: red;
}

*Визначення кольору сторін
p.one {
  border-style: solid;
  border-color: red green blue yellow;    червоний зверху, зелений справа, синій знизу і жовтий зліва 
}

HEX Значення
p.one {
  border-style: solid;
  border-color: #ff0000;       червоний колір 
}

RGB Значення
p.one {
  border-style: solid;
  border-color: rgb(255, 0, 0);    червоний колір 
}

HSL Значення
p.one {
  border-style: solid;
  border-color: hsl(0, 100%, 50%);     червоний колір 
}
*/


/* *  border  - окремі сторони. Тобто дає змогу по різному стиізувати кожну сторону межі
Вказує властивості кожної із меж
Приклад: 
p {
  border-top-style: dotted;
  border-right-style: solid;
  border-bottom-style: dotted;
  border-left-style: solid;
}
p {
  border-style: dotted solid;
}
*/


/* *   Border - Скорочена властивість
Для скорочення коду можна вказати всі окремі властивості межі в одній властивосіт

Властивість border - це скорочена властивість для наступних індивідуальних властивостей межі:
-border-width
-border-style (обов’язково)
-border-color
p {
  border: 5px solid red;
}

Також можна вказати всі окремі властивості лише для однієї сторони
Ліва межа: 
p {
  border-left: 6px solid red;
  background-color: lightgrey;
}
Нижня межа: 
p {
  border-bottom: 6px solid red;
  background-color: lightgrey;
}*/


/* *  *border-radius - використовується для додавання заокруглених меж елементу. Заокруглює кути
p.normal {
  border: 2px solid red;  - звичайна межа 
}
p.round1 {
  border: 2px solid red;    - кругла межа
  border-radius: 5px;
}
p.round2 {
  border: 2px solid red;
  border-radius: 8px;       -Заокруглена межа
}
p.round3 {
  border: 2px solid red;
  border-radius: 12px;       -Більш заокруглена межа
}

!Чим більше значення border-radius(в пікселях) тим більше буде заокругленість кутів
*/






___________________________________________________________________________
/* ! Margin - поля. Використовується для створення простору навколо елементів за межами будь яких визначених меж - полів(або зовнішніх відступів)
Властивості для визначення поля кожної сторони елемента:
*margin-top
*margin-right
*margin-bottom
*margin-left
*Margin Collapse - згортання полів
Властивості полів можуть мати такі значення: 
      *auto - браузер автоматично обраховує поле
      *length - вказує поле в пікселях, pt, см і т.д.
      *% - вказує поле в % від ширини, що має елемент
      *inherit - вказує, що поле має бути успадковане від батьківсього елемента
!Негативні значення полів також допускаються
Приклад: 
p {
  margin-top: 100px;
  margin-bottom: 100px;
  margin-right: 150px;
  margin-left: 80px;
}
      Приклад inherit. Тут ліве поле елемента <p class="ex1"> успадковується від батьківського елемента <div>
            div {
              border: 1px solid red;
              margin-left: 100px;
            }
            p.ex1 {
              margin-left: inherit;
            }
*Margin Collapse - згортання полів
Верхнє і нижнє поля іноді згортаються в одне поле, рівне найбільшому із двох полів. Цього не відбувається з лівим і правим полями
Демонстрація згортання полів: 
h1 {
  margin: 0 0 50px 0; має нижнє поле 50px
}
h2 {
  margin: 20px 0 0 0; верхнє поле 20px. 
}
Вертикально між ними має бути 70px. Але через згортання полів фактичне поле складає 50px
*/







___________________________________________________________________________
/* !Padding - внутрішній відступ
Використовується для створення простору навколо змісту елемента всередині будь якидх визначених меж
Властивості для відступу:  
*padding-top - вгорі
*padding-right - справа
*padding-bottom - знизу
*padding-left - зліва

Властивості можуть мати такі значення:
      *length - визначає відступ в пікселях, pt, см і т.д.
      *% - визначає відступ в % від ширини елемента, що його містить
      *inherit - визначає, що відступ має бути успадковано від батьківського елемента 
      
!Негативні значення не допускаються

Якщо елемент має визначену ширину(width), доданий до цього елементу відступ буде додано до загальної ширини елемента. Це може бути небажаним р-татом
Приклад: <div> має ширину 300px, але фактична ширина буде 350px(300 пікселів + 25 пікселів зліва + 25 пікселів справа)
div {
  width: 300px;
  padding: 25px;
}

Якщо використовувати властивість box-sizing, ширина залишиться рівною 300px незалежно від к-ті відступів
div {
  width: 300px;
  padding: 25px;
  box-sizing: border-box;
}
*/







___________________________________________________________________________
/* ! height та width - висота і ширина 
Вони встановлюють висоту/ширину області всередині відступу, межі і поля елемента. Не включають padding, border, margin.
Можуть мати наступні значення: 
*auto - за замовчуванням. Браузер розраховує висоту і ширину автоматично
*length - визначає висоту/ширину в  px, cm і т.д
*% - визначає висоту/ширину в відсотках від блоку, що містить
*initial - визначає висоту/ширину в значення за замовчуванням
*inherit - висота/ширина будуть успадковані від батьківського значення
Приклади: 
div {
  height: 200px;
  width: 50%;
  background-color: powderblue;
}
div {
  height: 100px;
  width: 500px;
  background-color: powderblue;
}
      *max-width - встановлює максимальну ширину елемента. 
      Вказується в значеннях довжини: px, cm і т.д. або в процентах (%), або встановити значення none(означає що максимальна ширина відсутня)
      *min-width - Встановлює мінімальну ширину елемента
      *max-height - Встановлює максимальну висоту елемента
      *min-height - Встановлює мінімальну висоту елемента
*/








___________________________________________________________________________
/*! CSS Блочна модель
Всі моделі HTML можна розглядати як блоки. В CSS 'блочна модель' використовується коли говорять про дизайн і верстку
Модель CSS блоку - це блок який охоплює кожен HTML елемент. Він складається із полів(margin), меж(border), відступів(padding) та контенту. Дана модель дозволяє додавати межі навколо елементів і визначати відстань між  елементами
Приклад блочної моделі: 
div {
  width: 300px;
  border: 15px solid green;
  padding: 50px;
  margin: 20px;
}

Щоб розрахувати весь розмір елементу, потрібно також додати відступ(padding), межі (border) та поля (margin). Встановлення просто ширини(width) і висоти (height) замало. Так як просто встановлюється ширина/висота області змісту
Приклад: тут <div> буде мати загальну ширину 350px
div {
  width: 320px;
  padding: 10px;
  border: 5px solid gray;
  margin: 0;
}
Розрахунок::after
320px (width)
+20px(лівий + правий padding)
+10px(лівий + правий border)
=350px
*Загальна ширина елемента має бути розріхована таким чином:  
Загальна ширина елемента=width+лівий padding+правий padding+лівий border+правий border+лівий margin+правий margin

*Загальна висота елемента має бути розріхована таким чином:
Загальна висота елемента=height+верхній padding+нижній padding+верхній border+нижній border+верхній margin+нижній margin
*/









___________________________________________________________________________
/* ! Outline -  контур
Контур - це смуга, яка проводиться навколо елементів поза межами, щоб зробити елемент виокремленим
Має такі властисвосіт: 
*outline-style - Визначає стиль контуру
      dotted,dashed,solid,double,ridge,inset,outset,none,hidden
*outline-color - Визначає колір контуру
      invert
*outline-width - Визначає ширину контуру
      thin,medium,thick
*outline-offset - Задає відстань між контуром і краєм або межею елемента.
*outline - 	Скорочена властивість для встановлення ширини контуру, стиля контуру і кольору контуру в одній об’яві.
Контур відрізняється від меж(border). Контур малюється поза межою елемента і може перекривати інший вміст. Контур не є частиною розмірів елементу. Зашальна висота і ширина елемента не залежить від ширини контуру
*/

/* *    Outline-style - стиль контуру
Значення: 
*dotted - визначає цятковий контур
*dashed - визначає пунктирний контур
*solid - визначає суцільний контур
*double - визначає подвійний контур
*groove - визначає 3D рифлений контур
*ridge - визначає 3D ребристий контур
*inset - визначає 3D внутрішній контур
*outset -  визначає 3D зовнішній контур
*none - визначає відсутність контур
*hidden - визначає прихований контур
!Жодна із властивостей контуру не буде мати ефект якщо не встановлена властивість utline-style
*/

/* *    Оutline-width  - ширина контуру
Значення: 
*thin - тонкий(зазвичай 1px)
*medium - середній(зазвичай 3px)
*thick - товстий (зазвичай 5px)
*Визначений розмір(в px, pt, cm, em і т.д.)
Приклади: 
      p.ex1 {
        border: 1px solid black;
        outline-style: solid;
        outline-color: red;
        outline-width: thin;
      }
                  p.ex4 {
                    border: 1px solid black;
                    outline-style: solid;
                    outline-color: red;
                    outline-width: 4px;
                  }
*/

/* *    Оutline-color - колір контуру
КОлір може бути встановлений за допомогою: 
*name - вкажіть назву кольору, наприклад "red"
*HEX - вкажіть шістнадцяткове значення, наприклад "#ff0000"
*RGB - вкажіть значення RGB, наприклад "rgb(255,0,0)"
*HSL - вкажіть значення HSL, наприклад 'hsl(0, 100%, 50%)'
*invert - виконує інверсію кольору (що забезпечує видимість контуру незалежно від кольорового фону                      

Приклади: 
      p.ex1 {
        border: 2px solid black;
        outline-style: solid;
        outline-color: red;
      }     Суцільний червоний контур.
      p.ex2 {
        border: 2px solid black;
        outline-style: dotted;
        outline-color: blue;
      }     Цятковий синій контур.
      p.ex3 {
        border: 2px solid black;
        outline-style: outset;
        outline-color: grey;
      }     Зовнішній сірий контур.

      *invert - вкионує інверсію кольору. Це гарантує що колір буде видно незалежно від кольору фону
            p.ex1 {
              border: 1px solid yellow;
              outline-style: solid;
              outline-color: invert;
            }     Суцільний інвертований контур.
*/

/* *    Оutline - скорочена властивість для встановлення наступних індивідуальних властивостей контуру 
  -outline-width
  -outline-style (обов’язково)
  -outline-color
Властивість  outline вказуєтьяс як 1 так і 2,3 значення зі списку.
! Порядок значень не має значення. 
p.ex1 {outline: dashed;}      Пунктирний контур.
p.ex2 {outline: dotted red;}      Цятковий червоний контур.
p.ex3 {outline: 5px solid yellow;}      Суцільний 5px жовтий контур.
p.ex4 {outline: thick ridge pink;}      Товстий ребристий рожевий контур*/

/* *   Outline Offset - додає простір між контуром і краєм/межею елемента.
Простір між елементами та його контуром прозорий
Приклад: 
p {
  margin: 30px;
  border: 1px solid black;
  outline: 1px solid red;
  outline-offset: 15px;
}   Поки не побачиш важко зрозуміти. Мкажу що виглядає наче текст в подвійній рамці     */










___________________________________________________________________________
/* ! Текст - форматування тексту
*Вирівнювання тексту
      -text-align     -text-align-last
      -direction      -unicode-bidi
      -vertical-align
*Оформлення тексту - text-decoration
      -text-decoration-line     -text-decoration-color
      -text-decoration-style    -text-decoration
      -text-decoration-thickness - Визначає товщину лінії text-decoration
      
*Трансформація - text-transform
      -uppercase - заголовний текст
      -lowercase - рядковий текст
      -capitalize - перша літера кожного слова заголовна
*Інтервал 
      -text-indent - Відступ тексту
      -letter-spacing - Міжлітерна відстань
      -line-height - Висота рядка
      -word-spacin - Інтервал між словами
      -white-space - Пробіл
*Тінь
      -text-shadow - додає тінь до тексту
  */




/** ВИРІВНЮВАННЯ ТЕКСТУ
    *text-align - визначає горизонтальне вирівнювання тексту
          center,left,right,justify
    *text-align-last - визначає спосіб вирівнювання останього рядка тексту
          center,left,right,justify
    Зміна напрямку текстуу
    *direction - визначає напрямок тексту/напрямок написання
    *unicode-bidi - використовується разом із direction, щоб установити або повернути, чи має бути перевизначений текст для підтримки кількох мов в одному документі
    Вертикальне вирівнювання
    *vertical-align - встановлює вертикальне вирівнювання тексту

    *text-align - використовується для встановлення горизонтального вирівнювання тексту
      Властивосіт:
      *center
      *left
      *right
      *justify

    Текст можна вирівняти за лівим або правим краєм, по центру або за шириною
    Вирівнювання по центру
    h1 {
      text-align: center;
    }
    Вирівнюванян за лівим краєм, якщо напрямок тексту зліва направо
    h2 {
      text-align: left;
    }
    Вирівнювання за правим краєм, якщо напрямок тексту справа на ліво
    h3 {
      text-align: right;
    }
    Рядок розтягується таким чином, щоб мати однакову ширину. Я так зрозуміла , що цей метод робить квадрат
      text-align: justify;
    }
*/

/* *    text-align-last  - визначає спосіб вирівнювання останього рядка тексту
Властивості: 
*right
*center
*justify
Приклад: Вирівнює останній рядок в <p> елементах
По праву сторону
p.a {
  text-align-last: right;
}
По центру
p.b {
  text-align-last: center;
}
Текст розтягується по всі ширині рядка
p.c {
  text-align-last: justify;
}
*/

/* *   direction і unicode-bidi - використовується для змін напрямку тексту елемента
Это направление текста справа налево.
p.ex1 {
  direction: rtl; 
  unicode-bidi: bidi-override;
}*/

/* *    vertical-align - вертикальне вирівнювання елемента
Властивості: 
*baseline
*text-top
*text-bottom
*sub
*super
img.a {
  vertical-align: baseline;
}
img.b {
  vertical-align: text-top;
}
img.c {
  vertical-align: text-bottom;
}
img.d {
  vertical-align: sub;
}
img.e {
  vertical-align: super;
}       */





/* *  text-decoration - ОФОРМЛЕННЯ ТЕКСТУ 
Властивості: 
*text-decoration-line
*text-decoration-color
*text-decoration-style
*text-decoration-thickness
*text-decoration


*text-decoration-line - додати декоративну лінію до тексту
Властивості: 
      *overline
      *line-through
      *underline
Можна комбінуати значення, як от overline underline
Не варто підкреслювати текст який не є посиланням, щоб не заплутати користувача    

*text-decoration-color - використовується для встановлення кольору декоративної лінії
h1 {
  text-decoration-line: overline;
  text-decoration-color: red;
}

*text-decoration-style - використовується для встановлення стилю декоративної лінії
Властивості: 
      *solid
      *double
      *dashed
      *wavy
p.ex3 {
  text-decoration-line: underline;
  text-decoration-color: red;
  text-decoration-style: wavy;
}

*text-decoration-thickness - встановлює товщину декоративої лінії
p {
  text-decoration-line: underline;
  text-decoration-color: red;
  text-decoration-style: double;
  text-decoration-thickness: 5px;
}
h2 {
  text-decoration-line: underline;
  text-decoration-thickness: 5px;
}
h3 {
  text-decoration-line: underline;
  text-decoration-thickness: 25%;
}

*text-decoration - скорочена властивість
-text-decoration-line (вимагається)
-text-decoration-color (не вимагається)
-text-decoration-style (не вимагається)
-text-decoration-thickness (не вимагається)
Приклад: 
p {
  text-decoration: underline red double 5px;
}

!За замовчуванням усі посилання HTML підкреслені. Властивість  text-decoration: none; використовується для видалення підкреслення з посилань
a {
  text-decoration: none;
}     */





/* * ТРАНСФОРМАЦІЯ ТЕКСТУ - використовується для визначення заголовних та рядкових літер в тексті
Це можна використати щоб перетворити всі літери в заголовні чи рядкові, або зробити першу літеру кожного слова заголовною
Властивості: 
      *uppercase - заголовний текст
      *lowercase - рядковий текст
      *capitalize - перша літера кожного слова заголовна
p.uppercase {
  text-transform: uppercase;
}
p.lowercase {
  text-transform: lowercase;
}
p.capitalize {
  text-transform: capitalize;
}     */



/* * ІНТЕРВАЛ
вВластивості: 
      *text-indent - Відступ тексту
      *letter-spacing - Міжлітерна відстань
      *line-height - Висота рядка
      *word-spacin - Інтервал між словами
      *white-space - Пробіл


*text-indent - використовується для визначення відступу першого рядка тексту 
p {
  text-indent: 50px;
}


*letter-spacing - використовується для визначення пробілу між символами в тексті
Збільшена відстань на 3px
h1 {
  letter-spacing: 3px;
}
Зменшена відстань, буква налазить на букву
h2 {
  letter-spacing: -3px;
}


*line-height - визначає відстань між рядками
p.small {
  line-height: 0.8;
}     Параграф з меншою висотою рядка 
p.big {
  line-height: 1.8;
}     Параграф з більшою висотою рядка


*word-spacin - визначає пробіл між словами в тексті
h1 {
  word-spacing: 10px;
}
h2 {
  word-spacing: -5px;
}


*white-space - визначає, як обробляються пробіли всередині елемента
Приклад: показано як відключити перенесення тексту всередині елемента
p {
  white-space: nowrap;
}*/


/* * text-shadow - ТІНЬ ТЕКСТУ
Властивіть: 
      *text-shadow - додає тінь до тексту
Вказується лише горизонтальна тінь(2px) та вертикальна(2px) можна додати  ефект розмиття(5px), колір
h1 {
  text-shadow: 2px 2px 5px red;
}*/












_________________________________________________________________________
/* ! ШРИФТИ
Є 5 загальних сімейств шрифтів
  *Serif - мають невелике обведення по краях кожної літери. Вони створюють відчуття формальності та елегантності.
  *Sans-serif - мають чисті лінії(без дрібних штрихів). Вони створюють сучасний і мінімалістичний вигляд.
  *Monospace - всі літери мають однакову фіксовану ширину. Вони створюють механічний вигляд.
  *Cursive - імітують людський почерк
  *Fantasy - декоративні/грільні шрифти



Властивості: 
*font-family - Визначає сімейство шрифтів для тексту
*Веб-безпечні шрифти
*font-style - Стиль шрифту
      -normal - текст відображається нормально
      -talic - текст відображається курсивом
      -oblique - текст "нахилений"(нахилений шрифт дуже схожий на курсив, але підтримується меншою мірою)
*Font-Weight - Товщина шрифту
      -normal
      -bold
      -lighter
*Font-Variant - Визначає, чи слід відображати текст дрібним шрифтом
*Font Size - Розмір шрифту
*font  - Встановлює всі властивості шрифту в одній об’яві


*font-family - властивість яка використовується щоб вказати шрифт тексту
Бажано щоб вона мала кілька назв шрифтів в якості запасного варіанту, щоб забезпечити максимальну сумісність між браузерами/ОС
Якщо в назві шрифту більше одного слова, вона має бути взята в лапки
.p1 {
  font-family: "Times New Roman", Times, sans-serif;
}     */

/* *    Веб-безпечні шрифти - це шрифти, які універсально ввстановлюються в усіх браузерах і на всіх пристроях
Але завжди є шанс що шрифт не знайдено або встановлений не правильно. В таких випадках потрібно використовувати резервні шрифти. Це означає ,що у властивість font-family потрібно додати список схожих шрифтів. Якщо перший шрифт не працює, браузер використає наступний. Список шрифтів завжди потрібно закінчувати назвою сімейства шрифтів
p {
  font-family: Tahoma, Verdana, sans-serif;
}

Кращі веб-безпечні шрифти для HTML та CSS:
-Arial (sans-serif)
-Verdana (sans-serif)
-Helvetica (sans-serif)
-Tahoma (sans-serif)
-Trebuchet MS (sans-serif)
-Times New Roman (serif)
-Georgia (serif)
-Garamond (serif)
-Courier New (monospace)
-Brush Script MT (cursive)
-Copperplate, Papyrus (fantasy)

Шрифтом за замовчуванням в Google є - Arial (sans-serif). Він один із найбільш веб-безпечних шрифтів, доступний в усіх основних ОС    */

/* *font-style - Стиль шрифту. Восновном використовуєтья для визначення курсивного теусту
Значення: 
      *normal - текст відображається нормально
      *italic - текст відображається курсивом
      *oblique - текст "нахилений"(нахилений шрифт дуже схожий на курсив, але підтримується меншою мірою)
p.normal {
  font-style: normal;
}     Параграф в звичайному стилі
p.italic {
  font-style: italic;
}     Параграф курсивом
p.oblique {
  font-style: oblique;
}   Параграф нахиленим стилем     

 *  Font-Weight - визначає товзщину шрифту
Властивості: 
      *normal
      *bold
      *lighter
p.normal {
  font-weight: normal;
}
p.thick {
  font-weight: bold;
}
p.light {
  font-weight: lighter;
}
p.thicker {
  font-weight: 900;
}     

 *  Font-Variant -  визначає чи має текст відображатись дріббним шрифтом
В шрифті з маленькими заголовними літерами всі рядкові літери перетворюються в великі літери. Однак перетворені великі літери відображаються меньшим розміром шрифту,
ніж початкові великі літери в тексті.
p.normal {
  font-variant: normal;
}
p.small {
  font-variant: small-caps;
}   */

/* *Font Size - Розмір шрифту
Значення може бути абсолютним або відносним
  Абсолютний розмір:
    - Встановлює текст вказаного розміру
    - Не дозволяє користувачу змінювати розмір тексту в усіх браузерах (погано через доступність)
    - Абсолютний розмір має користь,мколи відомий фізичний розмір виведення
  Відносний розмір: 
    - Встановлює розмір відносно оточуючих елементів
    - Дозволяє користувачу змінювати розмір тексту в браузерах
Якщо не встановити розмір шрифту, то він за замовчуванням доя нормального тексту, наприклад параграфу, буде 16px (16px=1em) - загальноприйнятий стандарт для вебсайтів.
h1 {
  font-size: 40px;
}
При використанні пікселів, всеодно можна використовувати інструменти маштабування, щоб змінити розмір всієї сторінки

*Em - Встановлення розміру шрифту за допомогою Em використовується для того щоб користувачі могли змінювати розмір тексту( в меню браузера)
1em = поточному розміру шрифта. Розмір тексту за замовчуванням 16 пікселів
1em = 16px
Розмір можна розраховувати від пікселів до em за формулою: pixels/16=em
p {
  font-size: 0.875em; -> 14px/16=0.875em 
За допомогою em можна налаштовувати розмір тексту в усіх браузерах
}

Рішення,
яке працює в усіх браузерах,
- встановити розмір шрифту за замовчуванням в процентах для елемента <body>:

*vw "viewport width" (ширина області перегляду) також розмыр шрифту можна встановити за допомогою цієї одиниці
<h1 style='font-size:10vw'>Hello World</h1>
Область перегляду (viewport) - це розмір вікна браузера. 1vw=1% ширини області перегляду. Якщо ширина області перегляду 50 см,
1vw складає 0,
5 см.

*Google шрифти - можна вкиористовувати коли потрібно використати щє якісь шрифти окрім стандартних HTML
Щоб його використати просто потрібно додати посилання в таблицю стилів в розділі  <head>
<head>
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Sofia">
<style>
body {
  font-family: "Sofia", sans-serif;
}
</style>
</head>
Щоб використати декілька Google-шрифтів достатньо розділити назви '|'
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Audiowide|Sofia|Trirong">
Але запит на декілька шрифтів може сповільнити роботу веб-сторінки

Шрифти можна стилізувати 
body {
  font-family: "Sofia", sans-serif;
  font-size: 30px;
  text-shadow: 2px 2px 2px #ababab;
}

*Віскнення ефектів шрифтів
Спочатку потрібно додати effect=effectname до Google AP, потім додати ім'я спеціального класу до елементу. Ім'я класу завжди поинається з font-effect- і закінчується з effectname.
head><link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Sofia&effect=fire"><style>body {
  font-family: "Sofia", sans-serif;
  font-size: 30px;
}
</style></head><body><h1 class="font-effect-fire">Sofia у вогні</h1></body>
Google-шрифти доступні тільки онлайн, щоб вони були доступні офлайн їх потрібно скачати і розмістити в папці

*Правила комбінування шрифтів
    1.Доповнення один одного
Хороша комбінація шрифтів має гармонувати, не бути занадто схожою або занадто різною.
    2. Використання суперсімейства шрифтів
Суперсімейство шрифтів - це набір шрифтів, призначений для сумісної роботи. Таким чином, використання різних шрифтів в одному суперсімействі безпечно.
    3.Контраст
Два занадто схожих шрифта часто конфліктують. Тим не менше, контрасти, виконані правильно, розкривають все найкраще в кожному шрифті.
    4.Обирати один головний шрифт
Один шрифт має бути босом, тобто - головним. Це встановлює ієрархію шрифтів на вашій сторінці. Цього можна добитися, варіюючи розмір, жирність і колір.
body {
  background-color: black;
  font-family: Verdana, sans-serif;
  font-size: 16px;
  color: gray;
}

h1 {
  font-family: Georgia, serif;
  font-size: 60px;
  color: white;
}

Комбінації:
-Georgia та Verdana
-Helvetica та Garamond
-Merriweather та Open Sans
-Ubuntu та Lora
-Abril Fatface та Poppins
-Cinzel та Fauna One
-Fjalla One та Libre Baskerville
-Space Mono та Muli
-Spectral та Rubik
-Oswald та Noto Sans


*font - Скорочена властивість шрифтів для:
      -font-style
      -font-variant
      -font-weight
      -font-size/line-height
      -font-family
Значення font-size та font-family обов'язкові
p.a {
  font: 20px Arial, sans-serif;
}

p.b {
  font: italic small-caps bold 12px/30px Georgia, serif;
}*/









_________________________________________________________________________
/* ! ІКОНКИ
Щоб додати іконки на HTML-сторінку - використовувати бібліотеку іконок, наприклад, Font Awesome.
Додати назву вказаного класу іконок в будь-який вбудований HTML-елемент (наприклад, <i> або <span>).
Всі іконки в бібліотеках іконок нижче представляють собою масштабовані вектори, які можна налаштувати за допомогою CSS (розмір, колір, тінь і т.д.)

*Font Awesome Іконки
Щоб потрапити потрвібно перейти на fontawesome.com, увійдіть в систему та отримайте код для додавання в розділ <head> вашої HTML-сторінки:
<script src="https://kit.fontawesome.com/ваш код.js"></script>

*Bootstrap іконки
Щоб використовувати гліфіконки Bootstrap, додайте наступний рядок в розділ <head> вашої HTML-сторінки:
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">

*Google Іконки
Щоб використовувати Google іконки, додайте наступний рядок всередині розділу <head> вашої HTML сторінки:
<link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">        */













_________________________________________________________________________
/* !  Посилання 
Посилання можуть бути оформлені за допомогою будь-якої CSS-властивості (наприклад, color, font-family, background і т.д.).
<head>
<style>
a {
  color: hotpink;
}
</style>
</head>
<body>
<h2>CSS Ссылки</h2>
<p><b><a href="index.html" target="_blank">Это ссылка</a></b></p>
</body>

Посилання оформляються в залежності від того в якому вони стані знаходяться
      *a:link - звичайне, невідвідуване  посилання
      *a:visited - посилання яке відвідавв користвувач
      *a:hover - посилання, коли куристувач наводить на нього курсор миші
      *a:active - посилання в той момент, коли воно натиснуте(активне)

Правила порядку: 
*a:hover ПОВИНЕН слідувати після a:link та a:visited
*a:active ПОВИНЕН слідувати після a:hover



*Комбінація з text-decoration 
a:link {
  text-decoration: none;
}     Посилання не підкреслене

a:visited {
  text-decoration: none;
}     Посилання не підкреслене

a:hover {
  text-decoration: underline;
}     Посилання підкеслюється в момент наведення мишою

a:active {
  text-decoration: underline;
}     Посилання підкеслюється в момент натискання

*Комбінація з background-color
a:link {
  background-color: yellow;
}
a:visited {
  background-color: cyan;
}
a:hover {
  background-color: lightgreen;
}
a:active {
  background-color: hotpink;
}

*Посилання стилізоване в вигляді кнопки
a:link, a:visited {
  background-color: #f44336;
  color: white;
  padding: 14px 25px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
}
a:hover, a:active {
  background-color: red;
}

*Приклад стилів до гіперпосилань
Силка змінює колір
a.one:link {color: #ff0000;}
a.one:visited {color: #0000ff;}
a.one:hover {color: #ffcc00;}
Силка змінює розмір шрифта
a.two:link {color: #ff0000;}
a.two:visited {color: #0000ff;}
a.two:hover {font-size: 150%;}
Змінює колір фону
a.three:link {color: #ff0000;}
a.three:visited {color: #0000ff;}
a.three:hover {background: #66ff66;}
Змінює сімейство шрифтів
a.four:link {color: #ff0000;}
a.four:visited {color: #0000ff;}
a.four:hover {font-family: monospace;}
Силка підкреслюється при наведені на неї курсора
a.five:link {color: #ff0000; text-decoration: none;}
a.five:visited {color: #0000ff; text-decoration: none;}
a.five:hover {text-decoration: underline;}

*Приклад створення поля/кнопки посилання
a:link, a:visited {
  background-color: white;
  color: black;
  border: 2px solid green;
  padding: 10px 20px;
  text-align: center;
  text-decoration: none;
  display: inline-block;
}

a:hover, a:active {
  background-color: green;
  color: white;
}

*Приклад різних типів курсорів
<span style="cursor: auto">auto</span><br>
<span style="cursor: crosshair">crosshair</span><br>
<span style="cursor: default">default</span><br>
<span style="cursor: e-resize">e-resize</span><br>
<span style="cursor: help">help</span><br>
<span style="cursor: move">move</span><br>
<span style="cursor: n-resize">n-resize</span><br>
<span style="cursor: ne-resize">ne-resize</span><br>
<span style="cursor: nw-resize">nw-resize</span><br>
<span style="cursor: pointer">pointer</span><br>
<span style="cursor: progress">progress</span><br>
<span style="cursor: s-resize">s-resize</span><br>
<span style="cursor: se-resize">se-resize</span><br>
<span style="cursor: sw-resize">sw-resize</span><br>
<span style="cursor: text">text</span><br>
<span style="cursor: w-resize">w-resize</span><br>
<span style="cursor: wait">wait</span>        */










__________________________________________________________________________
/* ! Списки
Властивості: 
 *list-style-type - виззначає тип маркера елемента списку 
      -Невпорядкований список: circle, square
      -Впорядкований список:  upper-roman, lower-alpha
      -За замовчуванням: none
*list-style-image - визначає зображення як маркер елемента списку
*list-style-position - визначає положення маркерів елемента списку(марковані пункти)
      *outside - означає що маркери будуть поза елементами списку
      *inside - означає що маркери будуть всередині елемента списку.
*list-style - скорочена властивість
      
HTML-списки та  CSS-властивості
В HTML є два основні типи списків:
- невпорядковані списки -<ul>- помічені маркерами
- впорядковані списки -<ol>- помічені цифрами або буквами
Властивості CSS : 
- встановлюють різні маркери елементів списку для
 впорядкованих списків
 -встановлюють різні маркери елементів списку для 
 невпорядкованих списків
 -встановлюють зображення як маркер елемента списку
 -додають кольори фону в списки та елементи списки

 *list-style-type - виззначає тип маркера елемента списку
      Властивості: 
      Невпорядкований список
      * circle
      * square
      Впорядкований список
      * upper-roman
      * lower-alpha
      Налаштування за замовчуванням
      *none - видаляє мітки/маркери
ul.a {
  list-style-type: circle;
}     круглі маркери
ul.b {
  list-style-type: square;
}     маркери квадратиками
ol.c {
  list-style-type: upper-roman;
}     маркери римськими цифрами
ol.d {
  list-style-type: lower-alpha;
}     маркери буквами

В списків також є поля за замовчуванням та відступи. Щоб 
видалити їх потрібно додати margin:0 та padding:0 до <ul> або <ol>:
ul {
  list-style-type: none;
  margin: 0;
  padding: 0;
}


*list-style-image - визначає зображення як маркер елемента списку
Приклад: 
ul {
  list-style-image: url('sqpurple.gif');
}


*list-style-position - визначає положення маркерів елемента списку(марковані пункти)
      *outside - означає що маркери будуть поза елементами списку
      Початок рядка кожного елемента списку буде вирівняно по вертикалі
      *inside - означає що маркери будуть всередині елемента списку.
      Оскільки вони будуть частиною ЕС
ul.a {
  list-style-position: outside;
}
ul.b {
  list-style-position: inside;
}


*list-style - скорочена властивість
ul {
 list-style: square inside url("sqpurple.gif");
}
Порядок властивостей: 
-list-style-type (якщо вказано list-style-image, значення цієї властивості буде відображатися, якщо зображення з якоїсь причини не може бути відображено)
-list-style-position (визначає, чи повинні маркери елементів списку з’являтися всередині або поза потоком контенту)
-list-style-image (визначає зображення як маркер елемента списку)

Якщо якесь значення відсутнє, буде встановлено значення за замовчуванням для відсутньої властивості

Все що додано в тег <ol> або <ul> впливає на весь список.
Властивість додана в тег <li>, впливає на окремі ЕС
ol {
  background: #ff9999;
  padding: 20;
}

ul {
  background: #3399ff;
  padding: 20;
}

ol li {
  background: #ffe5e5;
  padding: 5px;
  margin-left: 35px;
}

ul li {
  background: #cce5ff;
  margin: 5px;
}

Приклади: 
Список з червоною лівою межею
ul {
  border-left: 5px solid red;
  background-color: #f1f1f1;
  list-style-type: none;
  padding: 10px 20px;
}

Список на всю ширину з межею
ul {
  list-style-type: none;
  padding: 0;
  border: 1px solid #ddd;
}
ul li {
  padding: 8px 16px;
  border-bottom: 1px solid #ddd;
}
ul li:last-child {
  border-bottom: none
}
*/















