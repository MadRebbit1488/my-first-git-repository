//Розглянемо стандартні методи для роботи з рядками

const userName = 'Вася Пупкіна';
//Отримуємо першу букву  імені, щоб написати скорочення
//Це можна зробити звернувшись до рядка як до масиву
console.log(userName);
console.log(userName[0]); // В
//В даному випадку рядок буде поводити себе як масив
//таким чином модна побуквенно отримати весь рядок
/* const userName = 'Вася Пупкін'[0]; // В
 можна даний метод використовувати безпосередньо в
  самій змінній */

//Метод charAt
//Працює аналогічно
console.log(userName.charAt(1)); //а

//Можна дізнатись довжину рядка, так як образно це масив 
//букв
console.log(userName.length); //11
/* Отриману довжину можна якась обробляти в випадку
коли це необхідно */

//Пошук по рядку
//indexOf - повертає перше співпадіння індекса 
console.log(userName.indexOf('а')); //1
//Необов'язково шукати одну букву
console.log(userName.indexOf('уп')); //6
// lastIndexOf - повертає останнє співпадіння 
console.log(userName.lastIndexOf('а')); //11
// Includes
console.log(userName.includes('а')); // true

//Вивід частин рядка
//SLICE - обрізає рядок
//Масив обрізався далі від 4 індексу 
console.log(userName.slice(4));// Пупкіна
console.log(userName.slice(5, 8)); //Пуп


// Використання перевірок
const str = 'Купила баба коника';
console.log(str.includes('а')); // true
//startsWith - з чього починається рядок
console.log(str.startsWith('К')); // true
//endsWith - чим рядок закінчується
console.log(str.endsWith('а'));// true
console.log(str.endsWith('к')); // false
/* 
Рядки мають методи, тому що під капотом JS вони
перетворюються до об'єктів у яких є свої методи.

Насправді це виглядає ось так :*/
console.log(new String('Купила баба коника')); //String {'Купила баба коника'}
//Рядок перетворився в об'єкт у якого є відповідні методи
console.log(new String('Купила баба коника').includes('а')); //true

//Перетворення рядків
const strWords = 'А коник без ноги';
//toLowerCase - зазвичай використовується для стандартизації даних: 
//наприклад користувач задав  пошуковий запит, а ми не хочемо робити запит який впливає на верхній чи нижній регістр
// тоді запит буде переводитись в toLowerCase, а потім порівнювати
console.log(strWords.toLowerCase()); //а коник без ноги
console.log(strWords.toUpperCase()); //А КОНИК БЕЗ НОГИ

//replace - замінити
//Приймає першим аргументом елемент який потрібно замінити
//а другим аргументом - на що замінити
//Але він замінює тільки перше входження
//Приймає регулярні вирази
console.log(strWords.replace('А', 'Бо')); //Бо коник без ноги
/* Дані методи повертають новий рядок, але початковий не модифікують */

//replaceAll
console.log(strWords.replaceAll('н', 'п')); //А копик без поги

//Аналог replaceAll,тому що це новий метод і підтримуєтьсся не всіма браузерами
//Замість рядка передається регулярний вираз і 'g', щоб 
//знайти всі співпадіння
console.log(strWords.replace(/о/g, 'а')); //А каник без наги

/* 
TRIM/TRIMSTART/TRIMEND
trim - -прибирає відступи спочатку і в кінці
trimStart - прибирає відступ напочатку
trimEnd - прибирає відступ вкінці */

// \n - символ перенесення рядка
//Очищяємо рядок від відступів напочатку і в кінці
const str2 = ' Вася Пупкіна   \n';
console.log(str2.trim()); //Вася Пупкіна (без відступів)

