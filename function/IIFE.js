/* 
IIFE(Immediately Invoked Function Expression) негайно викликаний вираз ф-ції - це ф-ція яка виконується відразу після того як вона була оприділена

Синтаксис:
(function () {
    statements
})();
Складається із 2 частин:
-Перша - це самва анонімна ф-ція з лексичною обласю видимості, заключеним вчередині 'Оператора групування ()' . Завдяки цьому змінні IIFE замикаються і незасмічують глобальну область видимості
-Друга частина створює миттєво виконуваний ф-ціональний вираз (), завдяки чьому JS-движок виконує ф-цію напряму


В першу чергу слугувала механізмом інкапсуляції, яка являється однією з найважливіших властивостей ООП
Звичайна ф-ція, або стрілкова тут не підходять так як можуть викликатись скільки потрібно і в реальних випадках це створює лишні підключення до бази даних
*/

//Створюємо ф-цію так як створили б ананімну ф-цію і для того щоб перетворити це ствердження ф-ції в вираз який можна виконати потрібно її завернути в () <- стверджують що це вираз ф-ції у якої немає ніякої назви
(function () {
  console.log('Start IIFE');
  const a = 1;
})(); //Start IIFE (викликається строго один раз)
/*Так як імені в неї немає, то по назві ми її викликати не можемо, єдиний варіант викликати її відразу. Щоб це зробити потрібно в кінці поставити ()
Окрім того що вона викликається один раз, вона має свій SCOPE і відповідно все що всередині цього SCOPE буде доступно тільки всередині цієї ф-ції а не зовні
*/
//Зовні змінна 'а' недоступна
console.log(a); //ReferenceError: 
/* Така інкапсуляція дозволяє фактично все  що всередині заточити в ф-ції і ніхто зовні не буде мати туди доступ. Це дуже вадливо коли потрібно додаток розбити на модулі які б не пересікались, або в асинхронності. Зараз таке оголошення зустрчається рідко так як є інші методи*/

//Змінна яка присвоєна IIFE, зберігає в собі р-тат виконання ф-ції але не саму ф-цію
let result = (function () {
  let name = 'Pypa';
  return name;
})();
console.log(result); //Pypa
