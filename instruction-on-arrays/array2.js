//Є масив користувачів
const usersArr = [
  {name: 'user1', age: 20},
  {name: 'user2', age: 30}
];

const newUsers = true;
//Додаємо нового користувача до масиву
if(newUsers){
  usersArr.push({name: 'user3', age: 33}); // В кінець
  //usersArr.unshift({name: 'user3', age: 33}); // На початок
  // usersArr.pop(); //Видаляє з кінця
  // usersArr.shift();// Видаляє на початку
  //Видаляє вказаний елемент з масиву і дає змогу додавати на його місце новий
  // usersArr.splice(-1);  //Видаляє останній елемент
  //Видаяляє з першого елемента по третій , але не враховуючи його
  // usersArr.splice(1, 2); //Залишає перший елемент
  // usersArr.splice(0, 1); //Видаляється перший елемент
  // usersArr.splice(0, 1, {name:'user0', age:15}); //Таким чином видаляється перший елемент об'єкта і заміняється новим
}

console.log(typeof usersArr); // Object { name: "user3", age: 33 }

// В методі splice(1, 2) перший індекс вказує на те який елемент в списку видаляти, другий - скільки
 

console.log(usersArr.length);
usersArr.push( {profession: 'QA'} );
console.log(String(usersArr));


_________________________________________________________________________
const arr= [1, 2, 3];
//Бінарний + об'єднує дані приводячи їх до рядка
alert("" + 1); //1
alert("1" + 1); //11
alert("1,2" + 1); //1,21
console.log(arr);
 
____________________________________________________________
/* Щоб отримати доступ до елементу об'єкта в масиві потрібно в () після імені масиву вказати індекс об'єкта в [], а потім через крапку ім'я ключа:
console.log(arrTwo[1].type); */
/* Щоб виконати тіло ф-цію потрібно в виклиці після позиції ф-ції [] поствити () */

_________________________________________________________________________//Багатомірний масив , тобто коли елементи масиву самі являються масивами
const matrix = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];
console.log(matrix);
console.log(matrix[2][1]); //8
//[2]-елемент масиву, який являється також масивом ; [1] - ключ/позиція елементу
___________________________________________________________________________
//Масив поводить себе як об'єкт, тобто копіюється за посиланням
const arr = ['1', '2', '3'];
let newArr = arr; // Присвоюємо масив змінній
console.log(newArr.length); //3
newArr.length = 2; // Вкорочуємо масив
console.log(arr); //Array [ "1", "2" ]
//Сам масив по суті не змінився, просто тепер до нього є два ключа
___________________________________________________________________________
//Видалення
const arr = ['1', '2', '3'];
delete arr[1];
console.log(arr); //Array(3) [ "1", <1 empty slot>, "3" ]
console.log(arr[1]); // undefined
console.log(arr.length); // 3
//При використанні метода delete, к-сть елементів масиву не зменшується , замість видаленого елементу залищається порожній слот <1 empty slot>,\
_________________________________________________________________________
//dplice - дозволяє додавати, видиляти і замінювати елементи
//Синтаксис : arr.splice(index[, deleteCount, elem1, ...elemN])
//Видалляємо елемент
let arr1 = ['1', '2', '3'];
// Починаючи з першої позиції (2), видаляємо 1 елемент
arr1.splice(1, 1);
console.log(arr1); //Array [ "1", "3" ]

//Видаляємо елемент і повертаємо його в змінну
let arr2 = ['1', '2', '3'];
let remove = arr2.splice(1, 1);
console.log(remove); //Array [ "2" ]

//Замінюємо елементи
let arr3 = ['1', '2', '3'];
//Починаючи з нульової позиції (1), замінюємо один елемент
arr3.splice(0, 1, '1,5');
console.log(arr3); //Array(3) [ "1,5", "2", "3" ]

//Додаємо елемент
let arr4 = ['1', '2', '3'];
//Починаючи з першої позиції (перед 2), додаємо два елемента
// 1 - означає перед першою позицією
//0 - означає, що щось додається, без видалення об'єктів
arr4.splice(1, 0, '1,6', '1,7');
console.log(arr4); //Array(5) [ "1", "1,6", "1,7", "2", "3" ]

//Видаляємо елемент
let arr5 = ['1', '2', '3'];
//Починаючи з останньої позиції (3), видаляємо один елемнт
arr5.splice(-1, 1);
console.log(arr5); //Array [ "1", "2" ]
_________________________________________________________________________
//Метод slice
//Створює новий масив, в який копіює частину або весь масив
//Синтаксис: arr.slice([start], [end] не включаючи [end])

//Копіюємо частину масиву
let arr6 = ['1', '2', '3'];

//Починаючи з першої позиції ('2') до другої позиції ('3') але не включно
let arr7= arr6.slice(1, 2);
console.log(arr7); //Array [ "2" ]

//Починаючи з передостаньої позиції ('2') до останьої ('3') але не включно
let arr8 = arr6.slice(-2, -1);
console.log(arr8); //Array [ "2" ]

//Копіюємо весь масив
let arr9 = arr6.slice();
console.log(arr9); //Array(3) [ "1", "2", "3" ]
_________________________________________________________________________
//Метод concat
//Створює новий масив, в який копіює дані із інших масивів і додаткові значення (в кінець масиву)
//Синтаксис arr.concat(arg1, arg2...)
 let arr10 = ['1', '2', '3'];
 let arr11 = arr10.concat('4'); //Додає нове значення, думаю в такому форматі діє аналогічно методу push 
  console.log(arr11); //Array(4) [ "1", "2", "3", "4" ]
_________________________________________________________________________
//Пошук в масиві
//Методи indexOf/lastIndexOf/includes
//Аналоги строкових методів

/* 1.arr.indexOf(item, from) шукає item, починаючи з індекса from, і повертає індекс, на якому був знайдений шукаємий елемент, в іншому випадку -1 
2.arr.lastIndexOf(item, from) - те ж саме, але шукає справа на ліво.
3.arr.includes(item, from) - шукає item, починаючи з індекса from, і повертає true, якщо пошук успішний. 
 */

let arrRaid = ['Дора', 'дора', 'помідора'];

//indexOf
console.log(arrRaid.indexOf('Дора')); //0
console.log(arrRaid.indexOf('Дора', 2)); // -1

//includes
console.log(arrRaid.includes('Дора')); // true
console.log(arrRaid.includes('Дора', 2)); // false
___________________________________________________________________________
//Пошук в масиві
//find і findIndex
//Пошук в масиві об'єктів з певною умовою і повертають перший трапившийся елемент(find) , або його індекс(findIndex), який задовольнить умову

/* Синтаксис:
let result = arr.find(function(item, index, array) {
  якщо true - повертається поточний елемент і перебір припиняється
  якщо всі ітерації виявились хибними, повертається undefined
});
 */

let arrFind = [
  {name:'pypurka', age:14},
  {name:'pizhma', age:19},
  {name:'dinorik', age:'Не скажу'},
]
//Звертаємось до змінної якій присвоєний масив об'єктів .find (ф-ція яка виконується для кожного елементу масива(item - елемент масиву, index - ключ/позиція, array - весь масив ))
let resultOne = arrFind.find(function(item, index, array){
  return item.name === 'dinorik';
  return item.age === 14;
});
//Теж саме за допомогою стрілкової ф-ції
// let resultOne = arrFind.find(item => item.name ==='dinorik'); // Object { name: "dinorik", age: "Не скажу" }
console.log(resultOne); // Object { name: "dinorik", age: "Не скажу" }

//findIndex
let resultTwo = arrFind.findIndex(item => item.age === 14);
console.log(resultTwo); // 0

let resultThree = arrFind.findIndex(item => item.name === 'pizhma');
console.log(resultThree); // 1

_________________________________________________________________________
