//Метод reverse
//Модифікує вихідний масив перевертаючи його, тому вивід roles буде також зміненим
const roles = ['user', 'admin', 'manager', 'superuser'];
const res11 = roles.reverse();
console.log(res11); //Array(4) [ "superuser", "manager", "admin", "user" ]
console.log(roles); //Array(4) [ "superuser", "manager", "admin", "user" ]


//Сортування масивів
//Метод reverse - змінює порядок елементів на зворотній
let arrThree3 = ['Ваня', 'Іван', 'Оля'];
console.log(arrThree3.reverse()); //Array(3) [ "Оля", "Іван", "Ваня" ]
________________________________________________________________________________
//Перетворення масивів
//Метод map - викликає ф-цію для кожного елементу масива і повертає масив р-татів виконання цієї ф-ції
//В тілі ф-ції можна виконувати певний код і повертати р-тати які сформують значення нового масиву

/* Синтаксис:
let result = arr.map(function(item, index, array){
  //Повертає нове значення замість елемента
}); */

let arrMap = ['Ваня', 'Іван', 'Оля'];

let resultMap = arrMap.map(function(item, index, array){
  return item[0]; //Повертає першу букву кожного елементу "В", "І", "О"
});
console.log(arrMap); //Array(3) [ "Ваня", "Іван", "Оля" ] масив не змінився
console.log(resultMap); // новий масив Array(3) [ "В", "І", "О" ]

________________________________________________________________________________
//Сортування масивів
//Метод sort(fn) - змінює в масиві порядок елементів .Схоже на метод  reverse

/* //Сортування слів
let arrOne1 = ['Ваня', 'Іван', 'Оля'];
console.log(arrOne1.sort()); //Array(3) [ "Іван", "Ваня", "Оля" ] */

//Сортування чисел
let arrTwo2 = [8, 22, 1];
console.log(arrTwo2.sort()); //Array(3) [ 1, 22, 8 ]

/* За замовчуванням елементи сорторуються як рядки , для яких використовується лексикографічний порядок  
console.log('8' > '22'); // true */

//В момент виклику метода sort в () можна вказувати ім'я ф-ції яка буде враховуватись при виконанні сортування

//Ф-ція сортування
// function compareNumeric (a, b) {
//   console.log(`Порівнюємо ${a} і ${b}`);
//    if (a > b) return 1;  
//   if (a == b) return 0;
//   if (a < b) return -1; */
/*   Оскільки в даному випадку достатньо повертати позитивне або негативне число  або 0 , то замість запису вищє можнав використати  повернення результату виразу віднімання
return a - b;  //Array(3) [ 1, 8, 22 ] */

// }
// console.log(arrTwo2.sort(compareNumeric));  //Array(3) [ 1, 8, 22 ]
                                           // Порівнюємо 1 і 22
                                           //Порівнюємо 22 і 8
                                           // Порівнюємо 1 і 8

//Або можна вирішити всю задачу використовуючи стрілкову ф-цію і в () метода sort написати ф-ція яка буде виконувати все те саме
console.log(arrTwo2.sort((a, b) => a-b)); //  Array(3) [ 1, 8, 22 ]
//В р-таті ми отримуємо правильно відсортований масив чисел

________________________________________________________________________________

// ПЕРЕТВОРЕННЯ РЯДКІВ І МАСИВІВ ОДИН В ОДНОГО

//РЯДОК => МАСИВ
//split(розбити) - метод рядка, який дозволяє перетворювати(розділяти) вихідний рядок до масива не модифікуючи його. В якості аргумента він приймає симвал по якому потрібно розбити вихідний рядок на масив(/)

/* Метод split перетворює рядок в масив по заданому розділювачю
Синтаксис: 
str.split(delim)  */

//Нам приходить рядок з url(для нього існують окремі методи
const url = 'auth/user/login';
//Ми хочемо отримати кожний сегмент. 
const res = url.split('/');
//Ми вказали, що нам потрібно розбити по / і вийшло три елемента
console.log(res); //Array(3) [ "auth", "user", "login" ]

/* Якщо помтавити на початку / буде чьотири елемента
 const url = '/auth/user/login';
const res = url.split('/');
console.log(res); //Array(4) [ "", "auth", "user", "login" ] */

//Інший приклад
let strSplit = 'Ваня, Іван, Оля';

let arrSplit = strSplit.split(','); //Звертаємось до рядка strSplit ставимо '.' пишемо split і в ('') вказуємо розділювач, в даному випадку це ','
console.log(arrSplit); //Отримуємо масив із цих елементів :Array(3) [ "Ваня", " Іван", " Оля" ]

//Можна обмежити к-ть об'єктів які потраплять в масив, через ',' вказавши потрібну к-ть
let arrSplitOne = strSplit.split(',', 2);
console.log(arrSplitOne); //Array [ "Ваня", " Іван" ]


//МАСИВ => РЯДОК
/*join - поєднує елементи масива в рядок по заданому розділювачю, який може бути чим завгодно
Синтаксис:
arr.join(glue) */

const roles1 = ['user', 'admin', 'manager', 'superuser'];
console.log(roles1.join('-')); // user-admin-manager-superuser */

// Метод join перетворює масив в рядок 
let arrJoin = ['Ваня', 'Іван', 'Оля'];
let strJoin = arrJoin.join(',');
console.log(strJoin); // Ваня,Іван,Оля

//Отримання рядка із масиву ф-цією String, р-тат буде тимже
//Але при промтому переводі в рядок не можна вказати розділювач і він завжди буде ','
let arrJoinOne = ['Ваня', 'Іван', 'Оля'];
console.log(String(arrJoinOne)); // Ваня,Іван,Оля

________________________________________________________________________________

//Методи reduce/reduceRight

/* Якзщо потрібно перебрати масив - можна використовувати forEach, for або for...of . Якщо потрібно перебрати масив і повернути дані для кожного елемента - метод map

Методи arr.reduce і arr.reduceRight схожі на ці методи, але вони трохи складніші і використовуються для вичислення якогось єдиного значення на основі всього масиву
 */

Синтаксис:
let value = arr.reduce(function(previousValue, item, index, array){
  //....
}, [initial]);

/* До звичних аргументів додається previousValue:
  initial - початкове значення, записано другим параметром reduce
  previousValue - приймає р-тат попереднього виклику ф-ції, рівний початковому значенню (initial) при першому виклику (якщо переданий initial), 
  item - елемент масиву,
  index - його індекс,
  array - сам масив.

  Ф-ція застосовується по черзі до всіх елементів масиву і переносить свій р-тат на наступний виклик. */

  let arrReduce = [1, 2, 3, 4];
  let reduceValueOne = arrReduce.reduce(function(previousValue, item, index, array){
    return item + previousValue; //Сума поточного значення масиву [1, 2, 3, 4], з попереднім previousValue
  }, 0); //0 Початкове значення для previousValue

  console.log(reduceValueOne); //10

  /* 
   Крок №1 
  previousValue = 0;
  item = 1;
  Їх сума = 1;

   Крок №2
  previousValue = 1;
  item = 2;
  Їх сума = 3;

   Крок №3
  previousValue = 3;
  item = 3;
  Їх сума = 6;

   Крок №4
  previousValue = 6;
  item = 4;
  Їх сума = 10;
  */


  //Якщо не вказати початкове значення, то воно буде дорівнювати першому елементу масива(previousValue = Ваня), а робота метода почнеться з другого елемента (item = Іван)

let arrName = ['Ваня', 'Іван', 'Оля'];
let reduceValueTwo = arrName.reduce(function(previousValue, item, index, array){
    console.log(previousValue); //Ваня
    console.log(item); // Іван
    return `${item}, ${previousValue}`; //Іван, Ваня
});
console.log(`Користувачі: ${reduceValueTwo}`); // Користувачі: Оля, Іван, Ваня

//Метод reduceRight працює аналогічно, але проходить по масиву справа на ліво

________________________________________________________________________________
