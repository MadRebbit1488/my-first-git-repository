
/* Деструктуризаційне присвоєння -  в виразах дозволяє витягувати дані із масивів або об'єктів за допомогою синтаксиса, подібного до оголошення масива або літерала в об'єктію.Спрощує роботу з масивами і об'єктами дозволяючи працювати з окреми фрагментами даних, а не з усім масивом/об'єктом.
Деструктуризація не знищує масив, а тільки копіює потрібні значення в змінні
Також чудово працює з складними ф-ціями, які мають багато параметрів, знаень за замовчуванням і т.д */
/* Синтаксис:
let a, b , rest;
[a, b] = [1, 2];
console.log(a, b);

({a, b} = {a:1, b:2});
console.log(a, b);
*/
//
//Обмін значеннями змінних
let a = 1;
let b = 3;
[a, b] = [b, a];
console.log(a, b); // a = 3; b = 1;
//Без деструктуризації, для обміну даними потрібна додаткова тимчасова змінна

//
//Повернення декількох значень
 function f () {
  return [1, 2];//Повертаємий р-тат має вигляд масиву, значення якого розміщено в []. Можна повертати необмежену к-ть р-татів таким чиномю
}

let c, d;
[c, d] = f();
console.log("A is " + c + " B is " + d); //  C is 1 D is 2
//Оператор [c, d] = f() примвоює р-тат ф-ції змінним в []: c = 1, d = 2 

/* Також можна використовувати р-тат ф-ції в вигляді масиву
let c = f ();
console.log("C is " + c); // C is 1 */

//
// Якщо масив довший ніж список зліва, лишні елементи пропускаються, але якщо їх потрібно зібрати , то можна додати щє один параметр використовуючи оператор "залишкових параметрів" - ("...")

let [ name1, name2, ...rest] = ["Julius", "Caesar", "Consul", "of the Roman Republic"];
console.log(name1); //Julius
console.log(name2); // Caesar
console.log(rest[0]); //Consul
console.log(rest[1]); //of the Roman Republic
//Змінна rest являється масивом із залишкових елментів 

//
//Якщо в масиві менше значень чим в присвоєні, помилки  не буде. Відсутні значення будуть вважатись неоприділеними.
let [banana] = [];
console.log(banana); // undefined

//Якщо потрібно, щоб значення за замовчуванням замінило відсутнє, потрібно використати оператор "=".
let [fruit = 'banana', car = 'BMW'] = ['apple'];
console.log(fruit); //  apple
console.log(car); // BMW

//Значення за замовчуванням можуть бути складніші
let [name = prompt('name'), surname = prompt('surname')] = [, 'Durden'];
console.log(name); //Tyler
console.log(surname); //Durden


//
//Даний масив з даними користувача
const userData = ['Анна', '24', 'Київ'];
//Потрібно отримати частину цих даних
//Оголошуємо список змінних які будуть присвоєні елементам масиву

function getData () {
  return ['Анна', '24', 'Київ'];
}
/* 
const userName = getData() [0];
const age = getData() [1];
const city = getData() [2]; */
const [userName, age, city] = getData();
// const [userName, age, city] = userData; // теж саме можна робити і з масивом, отримуючи такий же р-тат

console.log(userName, age, city); // Анна 24 Київ
//Якщо якийсь елемент потрібно пропустити можна використати "_"
/* 
const [userName, _, city] = getData();
console.log(userName, city); // Анна Київ
"_" - це буде рахуватись як змінна в яку покладені дані, її можна просто ігнорувати
 */