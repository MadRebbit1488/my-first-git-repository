'use strict';

//Замикання   !!!Можуть запитувати на співбесіді
function changeBalance() {
  let balance = 0;
  return function (sum) {
    balance += sum;
    console.log(`Баланс: ${balance}`);
  }
}

//Тепер change це вищє описана ф-ція. Яка приймає суму і нічього не повертає, але змінює баланс
const change = changeBalance();
change(100); //Баланс: 100
change(-50); //Баланс: 50
change(200); //Баланс: 250
/* Не дивлячись на те, що ф-ція знаходиться в глобальному контексті нам всеодно вдається змінювати баланс і більш того від виклику до виклику баланс зберігається і ми можемо змінювати його*/

//Розглянемо покроково як працює замикання:
/*
  - Крок 1:
*Scope 
Global
- changeBalance  
- change 
*Stack містить тільки глобальний контекст
Все розкладено, починаємо виконувати код з оголошення ф-ції

  - Крок 2:
Виконуємо ф-цію changeBalance
*Stack:
      -changeBalance() мість баланс 
        - balance за замовчуванням рівний 0

Global
Ф-ція changeBalance при виконанні оголошує баланс і повертає нову ф-цію
На цьому виконання ф-ції changeBalance закінчено
*Scope:
Global
  -changeBalance() 
    - change

            changeBalance() 
              - balance 

  - Крок 3:
Викликаємо change
changeBalance по завершенню виконання йде із Stack, фактично зникає і чисто теоритично більше не існує. Замість цього на Stack поміщяється ф-ція change
*Stack:
    -change() має збільшити баланс на 100

Global    
*Scope в глобального контексту з'являється щє один дочірній
        Global:
            -changeBalance() 
                - change
Children of the global:
change  ----------------------changeBalance() 
  -sum                            - balance 

change змінив balance не дивлячись на те, що вони на одному рівні і ні один із них не являється дочірнім чи батьківським іншого, а тільки дочірні для Global. 
change не змінив баланс, він змінив баланс який знаходиться в рамках замикання.

Замикання - це комбінація ф-цій і лексичного оточення, в якому ця ф-ція була оприділена. Внутрішня механіка яка працює під капотом
Тобто ф-ція пам'ятає, в якому контексті вона була створена і може його використовувати











 */


