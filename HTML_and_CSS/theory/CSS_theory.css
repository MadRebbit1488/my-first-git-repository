/* Теми:
Підключення: 
* Зовнішня таблиця стилів
* Внутрішня таблиця стилів
*Вбудовані стилі

Кольори: 
* RGB
* RGBA
* HEX
* HSL
* HSLA

Фон: 
Властивість	            Опис
*background-color	      Встановлює колір фону елемента
      -opacity
*background-image	      Встановлює фонове зображення для елемента
*background-repeat	    Встановлює, як буде повторюватись фонове зображення
      -repeat-y
      -no-repeat
*background-attachment	Встановлює, чи є фонове зображення фіксованим, чи прокручується разом з іншою частиною сторінки
      -fixed
      -scroll
*background-position	  Встановлює початкову позицію фонового зображення
*background	            Встановлює всі властивості фону в одній об’яві
*background-clip	      Визначає область малювання фону
*background-origin	    Визначає, де розташовані фонові зображення.
*background-size	      Визначає розмір фонового зображення (зображень) 

Межа:
Більше властивостей у конспекті 
*border-style        Встановлює стиль чотирьох меж 
*border-width	        Встановлює ширину чотирьох меж
*border-color - Встановлює колір чотирьох меж
*border	              Встановлює всі властивості межі в одній об’яві
*border-radius	      Встановлює всі чотири властивості border-*-radius для *закруглених кутів

Поля:
*margin-top
*margin-right
*margin-bottom
*margin-left
*Margin Collapse - згортання полів

Внутрішні відступи:
*padding-top - вгорі
*padding-right - справа
*padding-bottom - знизу
*padding-left - зліва
*/




/** CSS синтаксис складається з селектора та блоку об'яви(декларації)
Селектор  Декларація
h1        {color:blue;} 
Селектор вказує на елемент HTML який потрібно стилізувати
Декларація включає назву CSS властивості та значення*/
___________________________________________________________________________
/*! Підключення CSS 
Способи підключення: 
-Зовнішня таблиця стилів
-Внутрішня таблиця стилів
-Вбудований стиль
*/
/**Зовнішня таблиця стилів змінює зовнішній вигляд всього сайту
Кожна HTML сторінка містить посилання на файл зовнішньої таблиці стилів всередині елемента <link>. Це найбільш розповсюджений спосіб 

Зовнішні стилі в елементі <link> вказуються всередині розділу <head>

<!DOCTYPE html>
<html>
<head>
<link rel="stylesheet" href="mystyle.css">
</head>
**Внутрішня таблиця стилів використовується тоді коли окрема HTML сторінка має свій унікальний стиль
Внутрішні стилі визначені в елементі <style> в середині розділу <head>

<!DOCTYPE html>
<html>
<head>
<style>
body {
  background-color: linen;
}
h1 {
  color: maroon;
  margin-left: 40px;
}
</style>
</head>
**Вбудовані стилі використовуються для застосування унікального стилю для окремого елементу на HTML-сторінці
Щоб використати вбудовані стилі, потрібно додати атрибут стилю до еледповідного тегу. Атрибут style може містити будь яку властивість CSS. Але це потрібно використовувати вкрай обережно, так як це перевантажує HTML-код та збільшує загальний об'єм веб-сторінки
Приклад: 
Вбудовані стилі визначаються в атрибути "style"

<body>
<h1 style="color:blue;text-align:center;">Це заголовок</h1>
<p style="color:red;">Це параграф.</p>
</body>

Якщо д=властивості для одного селектора визначені в різних таблицях стилів, то буде використано значення із останньої прочитаної таблиці стилів
**Порядок використання каскадних стилів
Всі стилі на сторінці будуть каскадно перетворюватись в нову віртуальну таблицю стилів.
Номер 1 має найвищий пріорітет
1. Вбудований стиль
2.Зовнішні та внутрішні таблиці стилів
3.Стиль браузера за замовчуванням*/





__________________________________________________________________________
/* !Кольори

*background-color - Колір фону
<h1 style="background-color:DodgerBlue;">Hello World</h1>

*color - Колір тексту 
<h1 style="color:Tomato;">Hello World</h1>

*border - Колір меж 
<h1 style="border:2px solid Tomato;">Hello World</h1>

*CSS значення кольору
Кольори можуть бути вказані з використання значень 
*RGB
*RGBA
*HEX
*HSL
*HSLA
*/

/*!  RGB 
Колір за допомогою RGB можна вказати використовуючи формулу 
rgb(red, green, blue)
Де кожен параметр визначає інтенсивність кольору від 0 до 255
Приклад: 
rgb (255, 0, 0) відображається червоним, тому що в червоного встановлено найбільш високе значення (255), а для інших значення 0
ДЛя чьорного кольору потрібно встановити параметр  rgb(0, 0, 0)
Для білого  rgb(255, 255, 255)
*/

/* ! RGBA - є розширенням значень кольору для RGB, який вихначає непрозорість кольору 
Вказується за допомогою  rgba(red, green, blue, alpha)
Параметр альфа - це число від 0,0(повністю прозорий) до 1,0(не прозорий)*/

/* ! HEX - колір можна вказати за допомогою шістнадцяткового значення в формі

*#rrggbb
-rr(red)
-gg(green)
-bb()blue

Інтенсивність кольору визначається в діапазоні від 00 та ff
Приклад: 
#ff0000 - червоний

Іноді можна зустріти 3-х значний шістнадцятковий код, це скорочення для деяких 6-значних шіістнадцядкових кодів.
Має вигляд:
#rgb (red, green, blue)  - від 0 до f
Можна використовуавати якщо кожне значення  (RR, GG і BB) однакове для кожного компонента.
Приклад:
#ff00cc можна записати як #f0c
*/

/* !  HSL вказує кольор за допомогою hue(Відтінок),saturation(насичення),lightness(яскравість)
hsl(hue, saturation, lightness)
*/

/* !   HSLA - є розширенням значення кольору HSL, який визначає непрозорість кольору
hsla(hue, saturation, lightness, alpha)
Альфа від 0,0(повністю прозорий) до 1,0(не прозорий)
*/




___________________________________________________________________________
/* !Background - Фон 
Використовується для визначення фонових ефектів елементів
Властивості фону: 
*background-color
      -opacity
*background-image
*background-repeat
      -repeat-y
      -no-repeat
*background-attachment
      -fixed
      -scroll
*background-position
*Background Shorthand*/

/* * background-color - колір фону 
Синтаксис: 
body {
  background-color: lightblue;
}
Таким чином можна встановити колір фону будь якого HTML-елементу

    *opacity - властивість яка визначає непрозорість/прозорість елемента. 
        Приймає значання від 0,0 до 1,0
        Приклад: 
        div {
          background-color: green;
          opacity: 0.3;
        }
        При додаванні прозорості до фону елемента всі дочірні елементи наслідують ту саму прозорість.
        Якщо не потрібно використовувати сподкуву прозорість до дочірніх елементів, потрібно використати значення кольору RGBA
        div {
          background: rgba(0, 128, 0, 0.3)     Зелений фон з opacity 30% 
        }
        */

/**  background-image - визначає зображення для використання в якості фону елемента
За замовчуванням зображення повторюється тому воно покриває весь елемент
Приклад: фонове зображення для сторінки
body {
  background-image: url("paper.gif");
}
Фонове зображення можна встановити для визначених елементів
p {
  background-image: url("paper.gif");
}
*/

/* *  background-repeat- за замовчуванням повторює зображення як по горизонталі так і по вертикалі
body {
  background-image: url("../images/gradient_bg.png");
  background-repeat: repeat-x;
}
Зображення варто повторювати тільки по горизонталі або тільки по вертикалі
      *repeat-y - повторює зображення по вертикалі
            background-repeat: repeat-y;

      *no-repeat - відображає фонове зображення тільки один раз 
            body {
              background-image: url("../images/img_tree.png");
              background-repeat: no-repeat;
            }
            Фонове зображення розтошовується в те місце що і текст
*/

/* *  background-position - використовується для вказуваня положення(позиції) фонового зображення
Приклад: розмщєння фонового зображення в правому верхньому куті
body {
  background-image: url("../images/img_tree.png");
  background-repeat: no-repeat;
  background-position: right top;
}   */

/* *   background-attachment - визначає, чи повинно фонове зображення прокручуватись або фіксуватись
      *fixed -  фонове зображення має бути фіксованим 
            body {
              background-image: url("../images/img_tree.png");
              background-repeat: no-repeat;
              background-position: right top;
              background-attachment: fixed;
            }
      
      *scroll - фонове зображення буде прокручуватись
            body {
              background-image: url("../images/img_tree.png");
              background-repeat: no-repeat;
              background-position: right top;
              background-attachment: scroll;
            }      */

/* *   Background Shorthand  - скорочена властивість
Щоб скоротити  код можна вказати всі властивості в одній єдиній властивості
Замість: 
body {
  background-color: #fff;
  background-image: url("img_tree.png");
  background-repeat: no-repeat;
  background-position: right top;
}
Можна записати скорочену властивість background
body {
  background: #fff url("../images/img_tree.png") no-repeat right top;
}
При використанні скороченої властивості потрібно дотримуватись порядку значень властивостей
-background-color
-background-image
-background-repeat
-background-attachment
-background-position
*/
/* *Всі CSS властивості фону
*Властивість              Опис
background-clip           Визначає область малювання фону
background-origin         Визначає,де розташовані фонові зображення.  background-size           Визначає розмір фонового зображення (зображень)
*/








___________________________________________________________________________
/* !  Border - Межа - дозволяє вказати стиль, ширину і колір межі елемента
Властивості межі: 
*border-style        Встановлює стиль чотирьох меж 
- значення див в конспекті
*border-width	        Встановлює ширину чотирьох меж
*border-color - Встановлює колір чотирьох меж
*border	              Встановлює всі властивості межі в одній об’яві
*border-radius	      Встановлює всі чотири властивості border-*-radius для *закруглених кутів

*border-top	          Встановлює всі властивості верхньої межі в одній об’яві
*border-top-color	    Встановлює колір верхньої межі
*border-top-style     Встановлює стиль верхньої межі
*border-top-width	    Встановлює ширину верхньої межі
*border-bottom	      Встановлює всі властивості нижньої межі в одній об’яві
*border-bottom-color	Встановлює колір нижньої межі
*border-bottom-style	Встановлює стиль нижньої межі
*border-bottom-width	Встановлює ширину нижньої межі
*border-left	        Встановлює всі властивості лівої межі в одній об’яві
*border-left-color	  Встановлює колір лівої межі
*border-left-style	  Встановлює стиль лівої межі
*border-left-width	  Встановлює ширину лівої межі
*border-right	        Встановлює всі властивості правої межі в одній об’яві
*border-right-color	  Встановлює колір правої межі
*border-right-style	  Встановлює стиль правої межі
*border-right-width	  Встановлює ширину правої межі
*/

/* *  border-style - визначає яку межу відображати
Має наступні значення:
      *dotted - визначає крапкову межу
      *dshed - визначає пунктирну межу
      *solid - визначає суцільну межу
      *double - визначає подвійну межу
      *groove - визначає тримірну рифлену межу. Ефект залежить від значення кольору межі
      *ridge - визначає тримірну ребристу межу. Ефект залежить від значення кольору межі
      *inset - визначає внутрішню тримірну межу. Ефект залежить від значення кольору межі
      *outset - визначає зовнішню тримірну межу. Ефект залежить від значення кольору межі
      *none - не визначає межі
      *hidden - визначає приховану межу
Може мати від 1 до 4 значень(для верхньої правої, нижньої, лівої межі)      
Приклад:    
p.dotted {border-style: dotted;}
p.dashed {border-style: dashed;}
p.solid {border-style: solid;}
p.double {border-style: double;}
p.groove {border-style: groove;}
p.ridge {border-style: ridge;}
p.inset {border-style: inset;}
p.outset {border-style: outset;}
p.none {border-style: none;}
p.hidden {border-style: hidden;}
p.mix {border-style: dotted dashed solid double;}   <-Змішана межа.

!Жодна інша властивіть не буде мати ефекту, якщо не встановлена властивість border-style
*/

/* *  border-width - Встановлює ширину чотирьох меж 
Ширина може бути задана як визначений розмір(в пікселях, pt, см, em і т.д.) або за допопмогою одного із трьох попередньо визначених значень:thin, medium, thick (тонка, середня, товста):
Приклад: 
p.one {
  border-style: solid;
  border-width: 5px;
}
p.two {
  border-style: solid;
  border-width: medium;
}
p.three {
  border-style: dotted;
  border-width: 2px;
}
p.four {
  border-style: dotted;
  border-width: thick;
}
p.five {
  border-style: double;
  border-width: 15px;
}
p.six {
  border-style: double;
  border-width: thick;
}

*Визначення ширини сторони: 
p.one {
  border-style: solid;
  border-width: 5px 20px;  5 пікселів сгори і знизу, 20 пікселів по бокам 
}

p.two {
  border-style: solid;
  border-width: 25px 10px 4px 35px; 25 пікселів згори, 10 пікселів справа, 4 пікселі знизу і 35 пікселів зліва 
}
*/

/* *    border-color - Встановлює колір чотирьох меж 
Колір можу бути встановлено: 
-name - вказати назву кольору, наприклад "red"
-HEX - вказати значення HEX, наприклад "#ff0000"
-RGB - вказати значення RGB, наприклад "rgb(255,0,0)"
-HSL - вказати значення HSL, наприклад "hsl(0, 100%, 50%)"
-transparent (прозорість)

!Якщо border-color не задано, він наслідує колір елемента
Приклад: 
p.one {
  border-style: solid;
  border-color: red;
}

*Визначення кольору сторін
p.one {
  border-style: solid;
  border-color: red green blue yellow;    червоний зверху, зелений справа, синій знизу і жовтий зліва 
}

HEX Значення
p.one {
  border-style: solid;
  border-color: #ff0000;       червоний колір 
}

RGB Значення
p.one {
  border-style: solid;
  border-color: rgb(255, 0, 0);    червоний колір 
}

HSL Значення
p.one {
  border-style: solid;
  border-color: hsl(0, 100%, 50%);     червоний колір 
}
*/


/* *  border  - окремі сторони. Тобто дає змогу по різному стиізувати кожну сторону межі
Вказує властивості кожної із меж
Приклад: 
p {
  border-top-style: dotted;
  border-right-style: solid;
  border-bottom-style: dotted;
  border-left-style: solid;
}
p {
  border-style: dotted solid;
}
*/


/* *   Border - Скорочена властивість
Для скорочення коду можна вказати всі окремі властивості межі в одній властивосіт

Властивість border - це скорочена властивість для наступних індивідуальних властивостей межі:
-border-width
-border-style (обов’язково)
-border-color
p {
  border: 5px solid red;
}

Також можна вказати всі окремі властивості лише для однієї сторони
Ліва межа: 
p {
  border-left: 6px solid red;
  background-color: lightgrey;
}
Нижня межа: 
p {
  border-bottom: 6px solid red;
  background-color: lightgrey;
}*/


/* *  *border-radius - використовується для додавання заокруглених меж елементу. Заокруглює кути
p.normal {
  border: 2px solid red;  - звичайна межа 
}
p.round1 {
  border: 2px solid red;    - кругла межа
  border-radius: 5px;
}
p.round2 {
  border: 2px solid red;
  border-radius: 8px;       -Заокруглена межа
}
p.round3 {
  border: 2px solid red;
  border-radius: 12px;       -Більш заокруглена межа
}

!Чим більше значення border-radius(в пікселях) тим більше буде заокругленість кутів
*/






___________________________________________________________________________
/* ! Margin - поля. Використовується для створення простору навколо елементів за межами будь яких визначених меж - полів(або зовнішніх відступів)
Властивості для визначення поля кожної сторони елемента:
*margin-top
*margin-right
*margin-bottom
*margin-left
*Margin Collapse - згортання полів
Властивості полів можуть мати такі значення: 
      *auto - браузер автоматично обраховує поле
      *length - вказує поле в пікселях, pt, см і т.д.
      *% - вказує поле в % від ширини, що має елемент
      *inherit - вказує, що поле має бути успадковане від батьківсього елемента
!Негативні значення полів також допускаються
Приклад: 
p {
  margin-top: 100px;
  margin-bottom: 100px;
  margin-right: 150px;
  margin-left: 80px;
}
      Приклад inherit. Тут ліве поле елемента <p class="ex1"> успадковується від батьківського елемента <div>
            div {
              border: 1px solid red;
              margin-left: 100px;
            }
            p.ex1 {
              margin-left: inherit;
            }
*Margin Collapse - згортання полів
Верхнє і нижнє поля іноді згортаються в одне поле, рівне найбільшому із двох полів. Цього не відбувається з лівим і правим полями
Демонстрація згортання полів: 
h1 {
  margin: 0 0 50px 0; має нижнє поле 50px
}
h2 {
  margin: 20px 0 0 0; верхнє поле 20px. 
}
Вертикально між ними має бути 70px. Але через згортання полів фактичне поле складає 50px
*/







___________________________________________________________________________
/* !Padding - внутрішній відступ
Використовується для створення простору навколо змісту елемента всередині будь якидх визначених меж
Властивості для відступу:  
*padding-top - вгорі
*padding-right - справа
*padding-bottom - знизу
*padding-left - зліва

Властивості можуть мати такі значення:
      *length - визначає відступ в пікселях, pt, см і т.д.
      *% - визначає відступ в % від ширини елемента, що його містить
      *inherit - визначає, що відступ має бути успадковано від батьківського елемента 
      
!Негативні значення не допускаються

Якщо елемент має визначену ширину(width), доданий до цього елементу відступ буде додано до загальної ширини елемента. Це може бути небажаним р-татом
Приклад: <div> має ширину 300px, але фактична ширина буде 350px(300 пікселів + 25 пікселів зліва + 25 пікселів справа)
div {
  width: 300px;
  padding: 25px;
}

Якщо використовувати властивість box-sizing, ширина залишиться рівною 300px незалежно від к-ті відступів
div {
  width: 300px;
  padding: 25px;
  box-sizing: border-box;
}
*/







___________________________________________________________________________
/* ! height та width - висота і ширина */